
MAX30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e0  080035e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080035e0  080035e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e0  080035e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000010  080035f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080035f8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d54  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002500  00000000  00000000  00030d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00033298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265e6  00000000  00000000  00034b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec8b  00000000  00000000  0005b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7f81  00000000  00000000  00069df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151d7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  00151dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003588 	.word	0x08003588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003588 	.word	0x08003588

080001c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ce:	f000 fc48 	bl	8000a62 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d2:	f000 f851 	bl	8000278 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d6:	f000 f945 	bl	8000464 <MX_GPIO_Init>
	MX_SPI2_Init();
 80001da:	f000 f905 	bl	80003e8 <MX_SPI2_Init>
	MX_I2C3_Init();
 80001de:	f000 f8c3 	bl	8000368 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */

	/* Hand-over function pointer for sensor communication */
	max30102_configs.comm.read = max30102_read;
 80001e2:	4b1e      	ldr	r3, [pc, #120]	; (800025c <main+0x94>)
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <main+0x98>)
 80001e6:	605a      	str	r2, [r3, #4]
	max30102_configs.comm.write = max30102_write;
 80001e8:	4b1c      	ldr	r3, [pc, #112]	; (800025c <main+0x94>)
 80001ea:	4a1e      	ldr	r2, [pc, #120]	; (8000264 <main+0x9c>)
 80001ec:	601a      	str	r2, [r3, #0]
	max30102_configs.comm.readInterruptPin = max30102_readInterruptPin;
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x94>)
 80001f0:	4a1d      	ldr	r2, [pc, #116]	; (8000268 <main+0xa0>)
 80001f2:	609a      	str	r2, [r3, #8]

	sx1508b_configs.comm.read = sx1508b_read;
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <main+0xa4>)
 80001f6:	4a1e      	ldr	r2, [pc, #120]	; (8000270 <main+0xa8>)
 80001f8:	605a      	str	r2, [r3, #4]
	sx1508b_configs.comm.write = sx1508b_write;
 80001fa:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0xa4>)
 80001fc:	4a1d      	ldr	r2, [pc, #116]	; (8000274 <main+0xac>)
 80001fe:	601a      	str	r2, [r3, #0]

	/* setup max30102 heart rate sensor */
	max30102_setup_communication(&max30102_configs);
 8000200:	4816      	ldr	r0, [pc, #88]	; (800025c <main+0x94>)
 8000202:	f003 f8c5 	bl	8003390 <max30102_setup_communication>

	/* setup sx1508b gipo extender and check all configs */
	sx1508b_setup_communication(&sx1508b_configs);
 8000206:	4819      	ldr	r0, [pc, #100]	; (800026c <main+0xa4>)
 8000208:	f003 f95a 	bl	80034c0 <sx1508b_setup_communication>
	sx1508b_configure();
 800020c:	f000 fa22 	bl	8000654 <sx1508b_configure>

	flashLED(100);
 8000210:	2064      	movs	r0, #100	; 0x64
 8000212:	f000 fa05 	bl	8000620 <flashLED>

	/* read from the FIFO queue */
	max30102_setMeasurementMode(MAX30102_MODE_HEART_RATE);
 8000216:	2002      	movs	r0, #2
 8000218:	f003 f90c 	bl	8003434 <max30102_setMeasurementMode>
	max30102_setupForMeasurement();
 800021c:	f003 f8cc 	bl	80033b8 <max30102_setupForMeasurement>

	// measure for one second
	uint8_t buffer[32] = { 0 };
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	f107 0308 	add.w	r3, r7, #8
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
 8000234:	615a      	str	r2, [r3, #20]
 8000236:	619a      	str	r2, [r3, #24]
	uint32_t endTime = HAL_GetTick() + 1000;
 8000238:	f000 fc7c 	bl	8000b34 <HAL_GetTick>
 800023c:	4603      	mov	r3, r0
 800023e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000242:	627b      	str	r3, [r7, #36]	; 0x24
	while(HAL_GetTick() < endTime) {
 8000244:	e003      	b.n	800024e <main+0x86>
		max30102_waitAndGetHeartrateSamples(buffer);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f003 f91b 	bl	8003484 <max30102_waitAndGetHeartrateSamples>
	while(HAL_GetTick() < endTime) {
 800024e:	f000 fc71 	bl	8000b34 <HAL_GetTick>
 8000252:	4602      	mov	r2, r0
 8000254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000256:	4293      	cmp	r3, r2
 8000258:	d8f5      	bhi.n	8000246 <main+0x7e>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800025a:	e7fe      	b.n	800025a <main+0x92>
 800025c:	200000e4 	.word	0x200000e4
 8000260:	0800070d 	.word	0x0800070d
 8000264:	0800075d 	.word	0x0800075d
 8000268:	08000739 	.word	0x08000739
 800026c:	200000f0 	.word	0x200000f0
 8000270:	08000789 	.word	0x08000789
 8000274:	080007b5 	.word	0x080007b5

08000278 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b0b8      	sub	sp, #224	; 0xe0
 800027c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800027e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 f976 	bl	8003578 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800028c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800029c:	463b      	mov	r3, r7
 800029e:	2288      	movs	r2, #136	; 0x88
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 f968 	bl	8003578 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a8:	2310      	movs	r3, #16
 80002aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ba:	2360      	movs	r3, #96	; 0x60
 80002bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002c6:	2301      	movs	r3, #1
 80002c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 80002d2:	2328      	movs	r3, #40	; 0x28
 80002d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002d8:	2307      	movs	r3, #7
 80002da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fd3a 	bl	8001d68 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x86>
		Error_Handler();
 80002fa:	f000 fa71 	bl	80007e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2303      	movs	r3, #3
 8000306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800031c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000320:	2104      	movs	r1, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f002 f906 	bl	8002534 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xba>
		Error_Handler();
 800032e:	f000 fa57 	bl	80007e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000336:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000338:	2300      	movs	r3, #0
 800033a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800033c:	463b      	mov	r3, r7
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fac6 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xd6>
		Error_Handler();
 800034a:	f000 fa49 	bl	80007e0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800034e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000352:	f001 fca3 	bl	8001c9c <HAL_PWREx_ControlVoltageScaling>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0xe8>
			!= HAL_OK) {
		Error_Handler();
 800035c:	f000 fa40 	bl	80007e0 <Error_Handler>
	}
}
 8000360:	bf00      	nop
 8000362:	37e0      	adds	r7, #224	; 0xe0
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C3_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C3_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x10909CEC;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C3_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_I2C3_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C3_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_I2C3_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C3_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_I2C3_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C3_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C3_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C3_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <MX_I2C3_Init+0x74>)
 80003a4:	f000 fefa 	bl	800119c <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C3_Init+0x4a>
		Error_Handler();
 80003ae:	f000 fa17 	bl	80007e0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_I2C3_Init+0x74>)
 80003b6:	f001 fbcb 	bl	8001b50 <HAL_I2CEx_ConfigAnalogFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80003c0:	f000 fa0e 	bl	80007e0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80003c4:	2100      	movs	r1, #0
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_I2C3_Init+0x74>)
 80003c8:	f001 fc0d 	bl	8001be6 <HAL_I2CEx_ConfigDigitalFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80003d2:	f000 fa05 	bl	80007e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000034 	.word	0x20000034
 80003e0:	40005c00 	.word	0x40005c00
 80003e4:	10909cec 	.word	0x10909cec

080003e8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_SPI2_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_SPI2_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_SPI2_Init+0x74>)
 80003f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003f8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_SPI2_Init+0x74>)
 80003fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000400:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000402:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_SPI2_Init+0x74>)
 8000404:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000408:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_SPI2_Init+0x74>)
 800040c:	2202      	movs	r2, #2
 800040e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_SPI2_Init+0x74>)
 8000412:	2201      	movs	r2, #1
 8000414:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_SPI2_Init+0x74>)
 8000418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800041c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_SPI2_Init+0x74>)
 8000420:	2218      	movs	r2, #24
 8000422:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <MX_SPI2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_SPI2_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <MX_SPI2_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_SPI2_Init+0x74>)
 8000438:	2207      	movs	r2, #7
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <MX_SPI2_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_SPI2_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <MX_SPI2_Init+0x74>)
 800044a:	f002 fefd 	bl	8003248 <HAL_SPI_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_SPI2_Init+0x70>
		Error_Handler();
 8000454:	f000 f9c4 	bl	80007e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000080 	.word	0x20000080
 8000460:	40003800 	.word	0x40003800

08000464 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800047a:	4b63      	ldr	r3, [pc, #396]	; (8000608 <MX_GPIO_Init+0x1a4>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a62      	ldr	r2, [pc, #392]	; (8000608 <MX_GPIO_Init+0x1a4>)
 8000480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b60      	ldr	r3, [pc, #384]	; (8000608 <MX_GPIO_Init+0x1a4>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
	HAL_PWREx_EnableVddIO2();
 8000492:	f001 fc59 	bl	8001d48 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	4b5c      	ldr	r3, [pc, #368]	; (8000608 <MX_GPIO_Init+0x1a4>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a5b      	ldr	r2, [pc, #364]	; (8000608 <MX_GPIO_Init+0x1a4>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b59      	ldr	r3, [pc, #356]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b56      	ldr	r3, [pc, #344]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a55      	ldr	r2, [pc, #340]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b53      	ldr	r3, [pc, #332]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b50      	ldr	r3, [pc, #320]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a4f      	ldr	r2, [pc, #316]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b4d      	ldr	r3, [pc, #308]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b4a      	ldr	r3, [pc, #296]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a49      	ldr	r2, [pc, #292]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <MX_GPIO_Init+0x1a4>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4843      	ldr	r0, [pc, #268]	; (800060c <MX_GPIO_Init+0x1a8>)
 80004fe:	f000 fe35 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLUE_RST_GPIO_Port, BLUE_RST_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2101      	movs	r1, #1
 8000506:	4842      	ldr	r0, [pc, #264]	; (8000610 <MX_GPIO_Init+0x1ac>)
 8000508:	f000 fe30 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_AG_Pin | BLUE_CS_Pin | CS_M_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f241 0106 	movw	r1, #4102	; 0x1006
 8000512:	4840      	ldr	r0, [pc, #256]	; (8000614 <MX_GPIO_Init+0x1b0>)
 8000514:	f000 fe2a 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_P_GPIO_Port, CS_P_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2108      	movs	r1, #8
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fe24 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_A_GPIO_Port, CS_A_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2110      	movs	r1, #16
 8000528:	483b      	ldr	r0, [pc, #236]	; (8000618 <MX_GPIO_Init+0x1b4>)
 800052a:	f000 fe1f 	bl	800116c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	4831      	ldr	r0, [pc, #196]	; (800060c <MX_GPIO_Init+0x1a8>)
 8000548:	f000 fc66 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_RST_Pin */
	GPIO_InitStruct.Pin = BLUE_RST_Pin;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BLUE_RST_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4619      	mov	r1, r3
 8000562:	482b      	ldr	r0, [pc, #172]	; (8000610 <MX_GPIO_Init+0x1ac>)
 8000564:	f000 fc58 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000568:	2304      	movs	r3, #4
 800056a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <MX_GPIO_Init+0x1b8>)
 800056e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4827      	ldr	r0, [pc, #156]	; (8000618 <MX_GPIO_Init+0x1b4>)
 800057c:	f000 fc4c 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_AG_Pin BLUE_CS_Pin CS_M_Pin */
	GPIO_InitStruct.Pin = CS_AG_Pin | BLUE_CS_Pin | CS_M_Pin;
 8000580:	f241 0306 	movw	r3, #4102	; 0x1006
 8000584:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	481e      	ldr	r0, [pc, #120]	; (8000614 <MX_GPIO_Init+0x1b0>)
 800059a:	f000 fc3d 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_P_Pin */
	GPIO_InitStruct.Pin = CS_P_Pin;
 800059e:	2308      	movs	r3, #8
 80005a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_P_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fc2e 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_IRQ_Pin */
	GPIO_InitStruct.Pin = BLUE_IRQ_Pin;
 80005bc:	2320      	movs	r3, #32
 80005be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_GPIO_Init+0x1b8>)
 80005c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLUE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0x1b4>)
 80005d0:	f000 fc22 	bl	8000e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_A_Pin */
	GPIO_InitStruct.Pin = CS_A_Pin;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_A_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0x1b4>)
 80005ec:	f000 fc14 	bl	8000e18 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2017      	movs	r0, #23
 80005f6:	f000 fba8 	bl	8000d4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005fa:	2017      	movs	r0, #23
 80005fc:	f000 fbc1 	bl	8000d82 <HAL_NVIC_EnableIRQ>

}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	48001800 	.word	0x48001800
 8000610:	48001c00 	.word	0x48001c00
 8000614:	48000400 	.word	0x48000400
 8000618:	48000800 	.word	0x48000800
 800061c:	10110000 	.word	0x10110000

08000620 <flashLED>:

/**
 * activates the LED for the specified amount of ms
 * @param duration		the duration of the LED to be ON, in ms
 */
void flashLED(uint32_t duration) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	4808      	ldr	r0, [pc, #32]	; (8000650 <flashLED+0x30>)
 8000630:	f000 fd9c 	bl	800116c <HAL_GPIO_WritePin>
	HAL_Delay(duration);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 fa89 	bl	8000b4c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <flashLED+0x30>)
 8000642:	f000 fd93 	bl	800116c <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	48001800 	.word	0x48001800

08000654 <sx1508b_configure>:

/**
 * configure the GPIO extender here
 */
void sx1508b_configure() {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

	uint8_t reg;

	// direction register -- set all gpio pins as outputs
	reg = 0x00;
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
	sx1508b_write(SX1508B_REG_DIR, &reg, 1);
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	2007      	movs	r0, #7
 8000666:	f000 f8a5 	bl	80007b4 <sx1508b_write>

	// activate PWM
//	sx1508b_configure_clock(0b0100);
//	sx1508b_configure_pwm(0b100);
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <i2c_read>:
 * @param uint8_t reg: sensor register address from which the data will be read
 * @param uint8_t* buf: pointer to the buffer in which read data will be written
 * @param uint8_t* bytes: number of bytes which will be read
 */
HAL_StatusTypeDef i2c_read(uint8_t dev, uint8_t reg, uint8_t *buf,
		uint8_t bytes) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	603a      	str	r2, [r7, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	460b      	mov	r3, r1
 8000684:	71bb      	strb	r3, [r7, #6]
 8000686:	4613      	mov	r3, r2
 8000688:	717b      	strb	r3, [r7, #5]

	// convert 7 bit device address to 16 bit address
	uint16_t DEVICE_ADDR = ((uint16_t) dev) << 1;
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	b29b      	uxth	r3, r3
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	81fb      	strh	r3, [r7, #14]

	// read data from device memory
	return HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf,
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	b29a      	uxth	r2, r3
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	b29b      	uxth	r3, r3
 800069a:	89f9      	ldrh	r1, [r7, #14]
 800069c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a0:	9002      	str	r0, [sp, #8]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <i2c_read+0x48>)
 80006ac:	f000 ff1a 	bl	80014e4 <HAL_I2C_Mem_Read>
 80006b0:	4603      	mov	r3, r0
			bytes, 1000);
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000034 	.word	0x20000034

080006c0 <i2c_write>:
 * @param uint8_t reg: sensor register address to which the buffer will be written
 * @param uint8_t* buf: pointer to the buffer which contains the writing data
 * @param uint8_t* bytes: number of bytes which will be written
 */
HAL_StatusTypeDef i2c_write(uint8_t dev, uint8_t reg, uint8_t *buf,
		uint8_t bytes) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	603a      	str	r2, [r7, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	717b      	strb	r3, [r7, #5]

	// convert 7 bit device address to 16 bit address
	uint16_t DEVICE_ADDR = ((uint16_t) dev) << 1;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	81fb      	strh	r3, [r7, #14]

	// write data to device memory
	return HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	797b      	ldrb	r3, [r7, #5]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	89f9      	ldrh	r1, [r7, #14]
 80006e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ec:	9002      	str	r0, [sp, #8]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <i2c_write+0x48>)
 80006f8:	f000 fde0 	bl	80012bc <HAL_I2C_Mem_Write>
 80006fc:	4603      	mov	r3, r0
			buf, bytes, 1000);

}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000034 	.word	0x20000034

0800070c <max30102_read>:
 * @brief User-defined i2c read function for MAX30102
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer in which read data will be written
 * @retval None
 */
void max30102_read(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]
	err = i2c_read(MAX30102_ADDRESS_BASE, reg, buf, bytes);
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	79f9      	ldrb	r1, [r7, #7]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	2057      	movs	r0, #87	; 0x57
 8000728:	f7ff ffa4 	bl	8000674 <i2c_read>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <max30102_readInterruptPin>:
/**
 * reads the value of the interrupt pin for the MAX30102 sensor
 *
 * @param buf	the buffer where the pin value is written to
 */
void max30102_readInterruptPin(uint8_t *buf) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// TODO: uncomment once sx1508b driver is added
	sx1508b_read_pin(MX30102_PIN_INTERRUPT, buf);
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <max30102_readInterruptPin+0x20>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fecd 	bl	80034e8 <sx1508b_read_pin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000

0800075c <max30102_write>:
 * @brief User-defined i2c write function for MAX30102
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer which contains the writing data
 * @retval None
 */
void max30102_write(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
	err = i2c_write(MAX30102_ADDRESS_BASE, reg, buf, bytes);
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	79f9      	ldrb	r1, [r7, #7]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	2057      	movs	r0, #87	; 0x57
 8000778:	f7ff ffa2 	bl	80006c0 <i2c_write>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <sx1508b_read>:
 * @brief User-defined i2c read function for SX1508B
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer in which read data will be written
 * @retval None
 */
void sx1508b_read(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
	err = i2c_read(SX1508B_ADDRESS_BASE << 2 | 0b00, reg, buf, bytes);
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	79f9      	ldrb	r1, [r7, #7]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	2020      	movs	r0, #32
 80007a4:	f7ff ff66 	bl	8000674 <i2c_read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <sx1508b_write>:
 * @brief User-defined i2c write function for SX1508B
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer which contains the writing data
 * @retval None
 */
void sx1508b_write(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
	err = i2c_write(SX1508B_ADDRESS_BASE << 2 | 0b00, reg, buf, bytes);
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	79f9      	ldrb	r1, [r7, #7]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	2020      	movs	r0, #32
 80007d0:	f7ff ff76 	bl	80006c0 <i2c_write>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_I2C_MspInit+0x7c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d127      	bne.n	80008a6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800086e:	2303      	movs	r3, #3
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800087e:	2304      	movs	r3, #4
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_I2C_MspInit+0x84>)
 800088a:	f000 fac5 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 8000894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_I2C_MspInit+0x80>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005c00 	.word	0x40005c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000800 	.word	0x48000800

080008bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_SPI_MspInit+0x7c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d128      	bne.n	8000930 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_SPI_MspInit+0x80>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_SPI_MspInit+0x80>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI_DATA_Pin|SPI_SCK_Pin;
 800090e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000920:	2305      	movs	r3, #5
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_SPI_MspInit+0x84>)
 800092c:	f000 fa74 	bl	8000e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40003800 	.word	0x40003800
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8bc 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_5);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <EXTI9_5_IRQHandler+0x10>)
 800099e:	f000 fa0b 	bl	8000db8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000002c 	.word	0x2000002c

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <SystemInit+0x5c>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <SystemInit+0x5c>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <SystemInit+0x60>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <SystemInit+0x60>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <SystemInit+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <SystemInit+0x60>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <SystemInit+0x60>)
 80009d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <SystemInit+0x60>)
 80009e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SystemInit+0x60>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SystemInit+0x60>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SystemInit+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a14:	f7ff ffca 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a1a:	e003      	b.n	8000a24 <LoopCopyDataInit>

08000a1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a22:	3104      	adds	r1, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a2c:	d3f6      	bcc.n	8000a1c <CopyDataInit>
	ldr	r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a30:	e002      	b.n	8000a38 <LoopFillZerobss>

08000a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a34:	f842 3b04 	str.w	r3, [r2], #4

08000a38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <LoopForever+0x16>)
	cmp	r2, r3
 8000a3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a3c:	d3f9      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f002 fd77 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a42:	f7ff fbc1 	bl	80001c8 <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a4c:	080035e8 	.word	0x080035e8
	ldr	r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a54:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000a58:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000a5c:	20000110 	.word	0x20000110

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>

08000a62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f961 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f80e 	bl	8000a94 <HAL_InitTick>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a84:	f7ff feb2 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_InitTick+0x6c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d023      	beq.n	8000af0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_InitTick+0x70>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_InitTick+0x6c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f96d 	bl	8000d9e <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10f      	bne.n	8000aea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d809      	bhi.n	8000ae4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f000 f937 	bl	8000d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_InitTick+0x74>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	e007      	b.n	8000af4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e004      	b.n	8000af4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e001      	b.n	8000af4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000000c 	.word	0x2000000c
 8000b04:	20000004 	.word	0x20000004
 8000b08:	20000008 	.word	0x20000008

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2000000c 	.word	0x2000000c
 8000b30:	200000f8 	.word	0x200000f8

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000f8 	.word	0x200000f8

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000000c 	.word	0x2000000c

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0c1b      	lsrs	r3, r3, #16
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	015a      	lsls	r2, r3, #5
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_EXTI_IRQHandler+0x5c>)
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4798      	blx	r3
    }
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010414 	.word	0x40010414

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e17f      	b.n	8001128 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8171 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00b      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d118      	bne.n	8000f00 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x128>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ac 	beq.w	8001122 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a5e      	ldr	r2, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <HAL_GPIO_Init+0x330>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe2:	4a5a      	ldr	r2, [pc, #360]	; (800114c <HAL_GPIO_Init+0x334>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800100c:	d025      	beq.n	800105a <HAL_GPIO_Init+0x242>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x338>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01f      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <HAL_GPIO_Init+0x33c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x23a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4d      	ldr	r2, [pc, #308]	; (8001158 <HAL_GPIO_Init+0x340>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x236>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x344>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x232>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_GPIO_Init+0x348>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x22e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x34c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x22a>
 800103e:	2306      	movs	r3, #6
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001042:	2307      	movs	r3, #7
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x244>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x244>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x244>
 800105a:	2300      	movs	r3, #0
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106c:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x334>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <HAL_GPIO_Init+0x350>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109e:	4a32      	ldr	r2, [pc, #200]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_GPIO_Init+0x350>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	f47f ae78 	bne.w	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001188:	e002      	b.n	8001190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e081      	b.n	80012b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fb36 	bl	8000834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	e006      	b.n	8001224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d104      	bne.n	8001236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	ea42 0103 	orr.w	r1, r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	021a      	lsls	r2, r3, #8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69d9      	ldr	r1, [r3, #28]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2220      	movs	r2, #32
 800129e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	817b      	strh	r3, [r7, #10]
 80012ce:	460b      	mov	r3, r1
 80012d0:	813b      	strh	r3, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b20      	cmp	r3, #32
 80012e0:	f040 80f9 	bne.w	80014d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <HAL_I2C_Mem_Write+0x34>
 80012ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0ed      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_I2C_Mem_Write+0x4e>
 8001306:	2302      	movs	r3, #2
 8001308:	e0e6      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001312:	f7ff fc0f 	bl	8000b34 <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2319      	movs	r3, #25
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 fac3 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0d1      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2221      	movs	r2, #33	; 0x21
 8001338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2240      	movs	r2, #64	; 0x40
 8001340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800135c:	88f8      	ldrh	r0, [r7, #6]
 800135e:	893a      	ldrh	r2, [r7, #8]
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4603      	mov	r3, r0
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f9d3 	bl	8001718 <I2C_RequestMemoryWrite>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0a9      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001388:	b29b      	uxth	r3, r3
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d90e      	bls.n	80013ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	b2da      	uxtb	r2, r3
 800139a:	8979      	ldrh	r1, [r7, #10]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fba5 	bl	8001af4 <I2C_TransferConfig>
 80013aa:	e00f      	b.n	80013cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	8979      	ldrh	r1, [r7, #10]
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 fb94 	bl	8001af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 faad 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e07b      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d034      	beq.n	8001484 <HAL_I2C_Mem_Write+0x1c8>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141e:	2b00      	cmp	r3, #0
 8001420:	d130      	bne.n	8001484 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	2200      	movs	r2, #0
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fa3f 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e04d      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d90e      	bls.n	8001464 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	22ff      	movs	r2, #255	; 0xff
 800144a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	b2da      	uxtb	r2, r3
 8001452:	8979      	ldrh	r1, [r7, #10]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 fb49 	bl	8001af4 <I2C_TransferConfig>
 8001462:	e00f      	b.n	8001484 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	b2da      	uxtb	r2, r3
 8001474:	8979      	ldrh	r1, [r7, #10]
 8001476:	2300      	movs	r3, #0
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fb38 	bl	8001af4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d19e      	bne.n	80013cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fa8c 	bl	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e01a      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2220      	movs	r2, #32
 80014a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_I2C_Mem_Write+0x224>)
 80014b6:	400b      	ands	r3, r1
 80014b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	fe00e800 	.word	0xfe00e800

080014e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	4608      	mov	r0, r1
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	817b      	strh	r3, [r7, #10]
 80014f6:	460b      	mov	r3, r1
 80014f8:	813b      	strh	r3, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	f040 80fd 	bne.w	8001706 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <HAL_I2C_Mem_Read+0x34>
 8001512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0f1      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Mem_Read+0x4e>
 800152e:	2302      	movs	r3, #2
 8001530:	e0ea      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800153a:	f7ff fafb 	bl	8000b34 <HAL_GetTick>
 800153e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2319      	movs	r3, #25
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f9af 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0d5      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2222      	movs	r2, #34	; 0x22
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800157c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001584:	88f8      	ldrh	r0, [r7, #6]
 8001586:	893a      	ldrh	r2, [r7, #8]
 8001588:	8979      	ldrh	r1, [r7, #10]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f913 	bl	80017c0 <I2C_RequestMemoryRead>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0ad      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d90e      	bls.n	80015d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	8979      	ldrh	r1, [r7, #10]
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_I2C_Mem_Read+0x22c>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fa91 	bl	8001af4 <I2C_TransferConfig>
 80015d2:	e00f      	b.n	80015f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	8979      	ldrh	r1, [r7, #10]
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <HAL_I2C_Mem_Read+0x22c>)
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 fa80 	bl	8001af4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	2200      	movs	r2, #0
 80015fc:	2104      	movs	r1, #4
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f956 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07c      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d034      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x1d0>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	2b00      	cmp	r3, #0
 8001650:	d130      	bne.n	80016b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f927 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e04d      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d90e      	bls.n	8001694 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	22ff      	movs	r2, #255	; 0xff
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	b2da      	uxtb	r2, r3
 8001682:	8979      	ldrh	r1, [r7, #10]
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fa31 	bl	8001af4 <I2C_TransferConfig>
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	8979      	ldrh	r1, [r7, #10]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 fa20 	bl	8001af4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d19a      	bne.n	80015f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f974 	bl	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e01a      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2220      	movs	r2, #32
 80016d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_I2C_Mem_Read+0x230>)
 80016e6:	400b      	ands	r3, r1
 80016e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001706:	2302      	movs	r3, #2
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	80002400 	.word	0x80002400
 8001714:	fe00e800 	.word	0xfe00e800

08001718 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	8979      	ldrh	r1, [r7, #10]
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <I2C_RequestMemoryWrite+0xa4>)
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f9d7 	bl	8001af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f8f0 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e02c      	b.n	80017b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001760:	893b      	ldrh	r3, [r7, #8]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
 800176a:	e015      	b.n	8001798 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800176c:	893b      	ldrh	r3, [r7, #8]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29b      	uxth	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f8d6 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e012      	b.n	80017b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800178e:	893b      	ldrh	r3, [r7, #8]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2200      	movs	r2, #0
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f884 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	80002000 	.word	0x80002000

080017c0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	817b      	strh	r3, [r7, #10]
 80017d2:	460b      	mov	r3, r1
 80017d4:	813b      	strh	r3, [r7, #8]
 80017d6:	4613      	mov	r3, r2
 80017d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	8979      	ldrh	r1, [r7, #10]
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <I2C_RequestMemoryRead+0xa4>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f984 	bl	8001af4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 f89d 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e02c      	b.n	800185a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001806:	893b      	ldrh	r3, [r7, #8]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
 8001810:	e015      	b.n	800183e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001812:	893b      	ldrh	r3, [r7, #8]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b29b      	uxth	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f883 	bl	8001930 <I2C_WaitOnTXISFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e012      	b.n	800185a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f831 	bl	80018b0 <I2C_WaitOnFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	80002000 	.word	0x80002000

08001868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d103      	bne.n	8001886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d007      	beq.n	80018a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	619a      	str	r2, [r3, #24]
  }
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c0:	e022      	b.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d01e      	beq.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff f933 	bl	8000b34 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e00f      	b.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4013      	ands	r3, r2
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	429a      	cmp	r2, r3
 8001924:	d0cd      	beq.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800193c:	e02c      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f870 	bl	8001a28 <I2C_IsAcknowledgeFailed>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e02a      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001958:	d01e      	beq.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195a:	f7ff f8eb 	bl	8000b34 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d302      	bcc.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d113      	bne.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d1cb      	bne.n	800193e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019bc:	e028      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f830 	bl	8001a28 <I2C_IsAcknowledgeFailed>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e026      	b.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7ff f8af 	bl	8000b34 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d113      	bne.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e007      	b.n	8001a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d1cf      	bne.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d151      	bne.n	8001ae6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a42:	e022      	b.n	8001a8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4a:	d01e      	beq.n	8001a8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4c:	f7ff f872 	bl	8000b34 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d302      	bcc.n	8001a62 <I2C_IsAcknowledgeFailed+0x3a>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d113      	bne.n	8001a8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e02e      	b.n	8001ae8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0320 	and.w	r3, r3, #32
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d1d5      	bne.n	8001a44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff fedd 	bl	8001868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <I2C_IsAcknowledgeFailed+0xc8>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fe00e800 	.word	0xfe00e800

08001af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	817b      	strh	r3, [r7, #10]
 8001b02:	4613      	mov	r3, r2
 8001b04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	0d5b      	lsrs	r3, r3, #21
 8001b10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <I2C_TransferConfig+0x58>)
 8001b16:	430b      	orrs	r3, r1
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	ea02 0103 	and.w	r1, r2, r3
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b24:	7a7b      	ldrb	r3, [r7, #9]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	03ff63ff 	.word	0x03ff63ff

08001b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d138      	bne.n	8001bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e032      	b.n	8001bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d139      	bne.n	8001c70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e033      	b.n	8001c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2224      	movs	r2, #36	; 0x24
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40007000 	.word	0x40007000

08001c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001caa:	d130      	bne.n	8001d0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb8:	d038      	beq.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2232      	movs	r2, #50	; 0x32
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0c9b      	lsrs	r3, r3, #18
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce0:	e002      	b.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf4:	d102      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f2      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d08:	d110      	bne.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d007      	beq.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d24:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	20000004 	.word	0x20000004
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6053      	str	r3, [r2, #4]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e3d4      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7a:	4ba1      	ldr	r3, [pc, #644]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d84:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80e4 	beq.w	8001f64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_RCC_OscConfig+0x4a>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	f040 808b 	bne.w	8001ec0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 8087 	bne.w	8001ec0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001db2:	4b93      	ldr	r3, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_RCC_OscConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e3ac      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_RCC_OscConfig+0x7c>
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de2:	e005      	b.n	8001df0 <HAL_RCC_OscConfig+0x88>
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d223      	bcs.n	8001e3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fd09 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e38d      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e08:	4b7d      	ldr	r3, [pc, #500]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7c      	ldr	r2, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e0e:	f043 0308 	orr.w	r3, r3, #8
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4977      	ldr	r1, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	4972      	ldr	r1, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	e025      	b.n	8001e88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6f      	ldr	r2, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	496a      	ldr	r1, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5a:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4965      	ldr	r1, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fcc9 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e34d      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e88:	f000 fc36 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	495a      	ldr	r1, [pc, #360]	; (8002004 <HAL_RCC_OscConfig+0x29c>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_OscConfig+0x2a0>)
 8001ea6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_RCC_OscConfig+0x2a4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fdf1 	bl	8000a94 <HAL_InitTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d052      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	e331      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d032      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fe2e 	bl	8000b34 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001edc:	f7fe fe2a 	bl	8000b34 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e31a      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a40      	ldr	r2, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	493b      	ldr	r1, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	4936      	ldr	r1, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
 8001f2c:	e01a      	b.n	8001f64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fdfb 	bl	8000b34 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f42:	f7fe fdf7 	bl	8000b34 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e2e7      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1da>
 8001f60:	e000      	b.n	8001f64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d074      	beq.n	800205a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x21a>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d10e      	bne.n	8001f9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d064      	beq.n	8002058 <HAL_RCC_OscConfig+0x2f0>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d160      	bne.n	8002058 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e2c4      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x24a>
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e01d      	b.n	8001fee <HAL_RCC_OscConfig+0x286>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x286>
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x298>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01c      	beq.n	8002030 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fd9d 	bl	8000b34 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffc:	e011      	b.n	8002022 <HAL_RCC_OscConfig+0x2ba>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	080035a0 	.word	0x080035a0
 8002008:	20000004 	.word	0x20000004
 800200c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7fe fd90 	bl	8000b34 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e280      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002022:	4baf      	ldr	r3, [pc, #700]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x2a8>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fd80 	bl	8000b34 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe fd7c 	bl	8000b34 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e26c      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800204a:	4ba5      	ldr	r3, [pc, #660]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x2d0>
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d060      	beq.n	8002128 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d005      	beq.n	8002078 <HAL_RCC_OscConfig+0x310>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d119      	bne.n	80020a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d116      	bne.n	80020a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002078:	4b99      	ldr	r3, [pc, #612]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_OscConfig+0x328>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e249      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	4990      	ldr	r1, [pc, #576]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	e040      	b.n	8002128 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d023      	beq.n	80020f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ae:	4b8c      	ldr	r3, [pc, #560]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a8b      	ldr	r2, [pc, #556]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fd3b 	bl	8000b34 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fd37 	bl	8000b34 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e227      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d4:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	497c      	ldr	r1, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e018      	b.n	8002128 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b7a      	ldr	r3, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a79      	ldr	r2, [pc, #484]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80020fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fd17 	bl	8000b34 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fd13 	bl	8000b34 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e203      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211c:	4b70      	ldr	r3, [pc, #448]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d03c      	beq.n	80021ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01c      	beq.n	8002176 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213c:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	4a67      	ldr	r2, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fcf2 	bl	8000b34 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe fcee 	bl	8000b34 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1de      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002166:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ef      	beq.n	8002154 <HAL_RCC_OscConfig+0x3ec>
 8002174:	e01b      	b.n	80021ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002176:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7fe fcd5 	bl	8000b34 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fcd1 	bl	8000b34 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1c1      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ef      	bne.n	800218e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80a6 	beq.w	8002308 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a43      	ldr	r2, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_OscConfig+0x57c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d118      	bne.n	8002226 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x57c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x57c>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002200:	f7fe fc98 	bl	8000b34 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fc94 	bl	8000b34 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e184      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_RCC_OscConfig+0x57c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x4d8>
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800223e:	e024      	b.n	800228a <HAL_RCC_OscConfig+0x522>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d110      	bne.n	800226a <HAL_RCC_OscConfig+0x502>
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002268:	e00f      	b.n	800228a <HAL_RCC_OscConfig+0x522>
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d016      	beq.n	80022c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe fc4f 	bl	8000b34 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7fe fc4b 	bl	8000b34 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e139      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x578>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ed      	beq.n	800229a <HAL_RCC_OscConfig+0x532>
 80022be:	e01a      	b.n	80022f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7fe fc38 	bl	8000b34 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fc34 	bl	8000b34 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d906      	bls.n	80022e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e122      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e8:	4b90      	ldr	r3, [pc, #576]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e8      	bne.n	80022c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a8a      	ldr	r2, [pc, #552]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8108 	beq.w	8002522 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	2b02      	cmp	r3, #2
 8002318:	f040 80d0 	bne.w	80024bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	429a      	cmp	r2, r3
 800232e:	d130      	bne.n	8002392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	3b01      	subs	r3, #1
 800233c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d127      	bne.n	8002392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d11f      	bne.n	8002392 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800235c:	2a07      	cmp	r2, #7
 800235e:	bf14      	ite	ne
 8002360:	2201      	movne	r2, #1
 8002362:	2200      	moveq	r2, #0
 8002364:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	4293      	cmp	r3, r2
 8002368:	d113      	bne.n	8002392 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d109      	bne.n	8002392 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	3b01      	subs	r3, #1
 800238c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d06e      	beq.n	8002470 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d069      	beq.n	800246c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b7      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023b4:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80023ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c0:	f7fe fbb8 	bl	8000b34 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fbb4 	bl	8000b34 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0a4      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCC_OscConfig+0x7c8>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f6:	3a01      	subs	r2, #1
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002400:	0212      	lsls	r2, r2, #8
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002408:	0852      	lsrs	r2, r2, #1
 800240a:	3a01      	subs	r2, #1
 800240c:	0552      	lsls	r2, r2, #21
 800240e:	4311      	orrs	r1, r2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002414:	0852      	lsrs	r2, r2, #1
 8002416:	3a01      	subs	r2, #1
 8002418:	0652      	lsls	r2, r2, #25
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002420:	0912      	lsrs	r2, r2, #4
 8002422:	0452      	lsls	r2, r2, #17
 8002424:	430a      	orrs	r2, r1
 8002426:	4941      	ldr	r1, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800242c:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002444:	f7fe fb76 	bl	8000b34 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fb72 	bl	8000b34 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e062      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800246a:	e05a      	b.n	8002522 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e059      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d152      	bne.n	8002522 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002494:	f7fe fb4e 	bl	8000b34 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fb4a 	bl	8000b34 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e03a      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x734>
 80024ba:	e032      	b.n	8002522 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d02d      	beq.n	800251e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024e0:	f023 0303 	bic.w	r3, r3, #3
 80024e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 80024ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fb1d 	bl	8000b34 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fb19 	bl	8000b34 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_RCC_OscConfig+0x7c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x796>
 800251c:	e001      	b.n	8002522 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	f99d808c 	.word	0xf99d808c

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0c8      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d910      	bls.n	8002578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0207 	bic.w	r2, r3, #7
 800255e:	4961      	ldr	r1, [pc, #388]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b0      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d04c      	beq.n	800261e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d107      	bne.n	800259c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258c:	4b56      	ldr	r3, [pc, #344]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d121      	bne.n	80025dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e09e      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d115      	bne.n	80025dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e092      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e086      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e07e      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	493f      	ldr	r1, [pc, #252]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ee:	f7fe faa1 	bl	8000b34 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	e00a      	b.n	800260c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fa9d 	bl	8000b34 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e066      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 020c 	and.w	r2, r3, #12
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	429a      	cmp	r2, r3
 800261c:	d1eb      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	492c      	ldr	r1, [pc, #176]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4924      	ldr	r1, [pc, #144]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x1b0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e036      	b.n	80026da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4918      	ldr	r1, [pc, #96]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4910      	ldr	r1, [pc, #64]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026aa:	f000 f825 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCC_ClockConfig+0x1b4>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490c      	ldr	r1, [pc, #48]	; (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f9e0 	bl	8000a94 <HAL_InitTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026d8:	7afb      	ldrb	r3, [r7, #11]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40021000 	.word	0x40021000
 80026ec:	080035a0 	.word	0x080035a0
 80026f0:	20000004 	.word	0x20000004
 80026f4:	20000008 	.word	0x20000008

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d121      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d11e      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800272c:	4b34      	ldr	r3, [pc, #208]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002738:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e005      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002754:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10d      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d102      	bne.n	8002776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_GetSysClockFreq+0x110>)
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	e004      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d101      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_RCC_GetSysClockFreq+0x114>)
 800277e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d134      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0xa6>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d003      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0xac>
 800279c:	e005      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_RCC_GetSysClockFreq+0x110>)
 80027a0:	617b      	str	r3, [r7, #20]
      break;
 80027a2:	e005      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_GetSysClockFreq+0x114>)
 80027a6:	617b      	str	r3, [r7, #20]
      break;
 80027a8:	e002      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	617b      	str	r3, [r7, #20]
      break;
 80027ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	3301      	adds	r3, #1
 80027bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	fb02 f203 	mul.w	r2, r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	0e5b      	lsrs	r3, r3, #25
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	3301      	adds	r3, #1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f0:	69bb      	ldr	r3, [r7, #24]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	080035b0 	.word	0x080035b0
 8002808:	00f42400 	.word	0x00f42400
 800280c:	007a1200 	.word	0x007a1200

08002810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff fa2a 	bl	8001c80 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
 800282e:	e014      	b.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002848:	f7ff fa1a 	bl	8001c80 <HAL_PWREx_GetVoltageRange>
 800284c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d10b      	bne.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d919      	bls.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2ba0      	cmp	r3, #160	; 0xa0
 800286c:	d902      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286e:	2302      	movs	r3, #2
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e013      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e010      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d902      	bls.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002880:	2303      	movs	r3, #3
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e00a      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d102      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800288c:	2302      	movs	r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e004      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d101      	bne.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 0207 	bic.w	r2, r3, #7
 80028a4:	4909      	ldr	r1, [pc, #36]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028dc:	2300      	movs	r3, #0
 80028de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d041      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f4:	d02a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fa:	d824      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002906:	d81e      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002910:	d010      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002912:	e018      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002914:	4b86      	ldr	r3, [pc, #536]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a85      	ldr	r2, [pc, #532]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002920:	e015      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fabb 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002932:	e00c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3320      	adds	r3, #32
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fba6 	bl	800308c <RCCEx_PLLSAI2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002944:	e003      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	74fb      	strb	r3, [r7, #19]
      break;
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002954:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	4973      	ldr	r1, [pc, #460]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800296a:	e001      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d041      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002980:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002984:	d02a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800298a:	d824      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800298c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002996:	d81e      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d010      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029a2:	e018      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a4:	4b62      	ldr	r3, [pc, #392]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a61      	ldr	r2, [pc, #388]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa73 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3320      	adds	r3, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fb5e 	bl	800308c <RCCEx_PLLSAI2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	74fb      	strb	r3, [r7, #19]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e4:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f2:	494f      	ldr	r1, [pc, #316]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029fa:	e001      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a0 	beq.w	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a44:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a50:	f7fe f870 	bl	8000b34 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a56:	e009      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe f86c 	bl	8000b34 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d15c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01f      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d019      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe f82b 	bl	8000b34 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae0:	e00b      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe f827 	bl	8000b34 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	74fb      	strb	r3, [r7, #19]
            break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b26:	e009      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	74bb      	strb	r3, [r7, #18]
 8002b2c:	e006      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3c:	7c7b      	ldrb	r3, [r7, #17]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a9d      	ldr	r2, [pc, #628]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5a:	4b98      	ldr	r3, [pc, #608]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	4994      	ldr	r1, [pc, #592]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 020c 	bic.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	498c      	ldr	r1, [pc, #560]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b9e:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4983      	ldr	r1, [pc, #524]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc0:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	497b      	ldr	r1, [pc, #492]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	4972      	ldr	r1, [pc, #456]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c04:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	496a      	ldr	r1, [pc, #424]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	4961      	ldr	r1, [pc, #388]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4959      	ldr	r1, [pc, #356]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6a:	4b54      	ldr	r3, [pc, #336]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	4950      	ldr	r1, [pc, #320]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	4948      	ldr	r1, [pc, #288]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	493f      	ldr	r1, [pc, #252]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d028      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
 8002cfc:	e011      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f8c8 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	491f      	ldr	r1, [pc, #124]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d58:	60d3      	str	r3, [r2, #12]
 8002d5a:	e011      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f899 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a02      	ldr	r2, [pc, #8]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db6:	60d3      	str	r3, [r2, #12]
 8002db8:	e014      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f867 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02f      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	4928      	ldr	r1, [pc, #160]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f844 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d014      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	74bb      	strb	r3, [r7, #18]
 8002e2a:	e011      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3320      	adds	r3, #32
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f925 	bl	800308c <RCCEx_PLLSAI2_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb2:	4b75      	ldr	r3, [pc, #468]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d10d      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d047      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e044      	b.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d018      	beq.n	8002f2a <RCCEx_PLLSAI1_Config+0x86>
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d825      	bhi.n	8002f48 <RCCEx_PLLSAI1_Config+0xa4>
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0x62>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d009      	beq.n	8002f18 <RCCEx_PLLSAI1_Config+0x74>
 8002f04:	e020      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11d      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e01a      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f18:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d116      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f28:	e013      	b.n	8002f52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f46:	e006      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e004      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	430b      	orrs	r3, r1
 8002f74:	4944      	ldr	r1, [pc, #272]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d17d      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a40      	ldr	r2, [pc, #256]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fdd2 	bl	8000b34 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f94:	f7fd fdce 	bl	8000b34 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa8:	4b37      	ldr	r3, [pc, #220]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ef      	bne.n	8002f94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d160      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68d2      	ldr	r2, [r2, #12]
 8002fd6:	0912      	lsrs	r2, r2, #4
 8002fd8:	0452      	lsls	r2, r2, #17
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	492a      	ldr	r1, [pc, #168]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
 8002fe2:	e027      	b.n	8003034 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d112      	bne.n	8003010 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ff2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	0211      	lsls	r1, r2, #8
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6912      	ldr	r2, [r2, #16]
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0552      	lsls	r2, r2, #21
 8003006:	430a      	orrs	r2, r1
 8003008:	491f      	ldr	r1, [pc, #124]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]
 800300e:	e011      	b.n	8003034 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003018:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6952      	ldr	r2, [r2, #20]
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0652      	lsls	r2, r2, #25
 800302c:	430a      	orrs	r2, r1
 800302e:	4916      	ldr	r1, [pc, #88]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800303e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fd fd78 	bl	8000b34 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003048:	f7fd fd74 	bl	8000b34 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
          break;
 800305a:	e005      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4904      	ldr	r1, [pc, #16]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d018      	beq.n	80030d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10d      	bne.n	80030d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
       ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d047      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e044      	b.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d018      	beq.n	8003112 <RCCEx_PLLSAI2_Config+0x86>
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d825      	bhi.n	8003130 <RCCEx_PLLSAI2_Config+0xa4>
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d002      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0x62>
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d009      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x74>
 80030ec:	e020      	b.n	8003130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ee:	4b55      	ldr	r3, [pc, #340]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11d      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e01a      	b.n	8003136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003100:	4b50      	ldr	r3, [pc, #320]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e013      	b.n	800313a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800312e:	e006      	b.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e004      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	430b      	orrs	r3, r1
 800315c:	4939      	ldr	r1, [pc, #228]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d167      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a35      	ldr	r2, [pc, #212]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fd fcde 	bl	8000b34 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317a:	e009      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800317c:	f7fd fcda 	bl	8000b34 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
        break;
 800318e:	e005      	b.n	800319c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ef      	bne.n	800317c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14a      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	0912      	lsrs	r2, r2, #4
 80031c0:	0452      	lsls	r2, r2, #17
 80031c2:	430a      	orrs	r2, r1
 80031c4:	491f      	ldr	r1, [pc, #124]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	614b      	str	r3, [r1, #20]
 80031ca:	e011      	b.n	80031f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	0211      	lsls	r1, r2, #8
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6912      	ldr	r2, [r2, #16]
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0652      	lsls	r2, r2, #25
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4916      	ldr	r1, [pc, #88]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd fc9a 	bl	8000b34 <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003202:	e009      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003204:	f7fd fc96 	bl	8000b34 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d902      	bls.n	8003218 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	73fb      	strb	r3, [r7, #15]
          break;
 8003216:	e005      	b.n	8003224 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	4313      	orrs	r3, r2
 8003236:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e095      	b.n	8003386 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d009      	beq.n	8003280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
 8003272:	e005      	b.n	8003280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fb0e 	bl	80008bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c0:	d902      	bls.n	80032c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e002      	b.n	80032ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032d6:	d007      	beq.n	80032e8 <HAL_SPI_Init+0xa0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	ea42 0103 	orr.w	r1, r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	f003 0204 	and.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003364:	ea42 0103 	orr.w	r1, r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <max30102_setup_communication>:
 *
 * @param  setup   user defined setup struct (ptr)
 * @retval       	interface status (MANDATORY: return 0 -> no Error) TODO
 *
 */
void max30102_setup_communication(max30102_t *configs) {
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

	/* Save pointer to function globally */
	max30102_comm.read = configs->comm.read;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <max30102_setup_communication+0x24>)
 800339e:	6053      	str	r3, [r2, #4]
	max30102_comm.write = configs->comm.write;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a03      	ldr	r2, [pc, #12]	; (80033b4 <max30102_setup_communication+0x24>)
 80033a6:	6013      	str	r3, [r2, #0]

	// TODO: Implement return if successful
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	200000fc 	.word	0x200000fc

080033b8 <max30102_setupForMeasurement>:
}

/**
 * clears the registers that will be used
 */
void max30102_setupForMeasurement() {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
	// clear registers that will store measurement information
	uint8_t data = 0x00;
 80033be:	2300      	movs	r3, #0
 80033c0:	71fb      	strb	r3, [r7, #7]
	max30102_comm.write(MAX30102_REG_FIFO_WRITE_PTR, &data, 1);
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <max30102_setupForMeasurement+0x78>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1df9      	adds	r1, r7, #7
 80033c8:	2201      	movs	r2, #1
 80033ca:	2004      	movs	r0, #4
 80033cc:	4798      	blx	r3
	max30102_comm.write(MAX30102_REG_OVERFLOW_COUNTER, &data, 1);
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <max30102_setupForMeasurement+0x78>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1df9      	adds	r1, r7, #7
 80033d4:	2201      	movs	r2, #1
 80033d6:	2005      	movs	r0, #5
 80033d8:	4798      	blx	r3
	max30102_comm.write(MAX30102_REG_FIFO_READ_PTR, &data, 1);
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <max30102_setupForMeasurement+0x78>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	1df9      	adds	r1, r7, #7
 80033e0:	2201      	movs	r2, #1
 80033e2:	2006      	movs	r0, #6
 80033e4:	4798      	blx	r3

	// set pulse width to 411us
	data = 0x00;
 80033e6:	2300      	movs	r3, #0
 80033e8:	71fb      	strb	r3, [r7, #7]
	max30102_comm.read(MAX30102_REG_SPO2_CONF, &data, 1);
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <max30102_setupForMeasurement+0x78>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	1df9      	adds	r1, r7, #7
 80033f0:	2201      	movs	r2, #1
 80033f2:	200a      	movs	r0, #10
 80033f4:	4798      	blx	r3
	data = (data & 0b11111100) | 0b11;
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f043 0303 	orr.w	r3, r3, #3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	71fb      	strb	r3, [r7, #7]
	max30102_comm.write(MAX30102_REG_SPO2_CONF, &data, 1);
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <max30102_setupForMeasurement+0x78>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1df9      	adds	r1, r7, #7
 8003406:	2201      	movs	r2, #1
 8003408:	200a      	movs	r0, #10
 800340a:	4798      	blx	r3

	// set LED current to 12.6mA
	data = 0x3F;
 800340c:	233f      	movs	r3, #63	; 0x3f
 800340e:	71fb      	strb	r3, [r7, #7]
	max30102_comm.write(MAX30102_REG_LED1_AMP, &data, 1); // red led
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <max30102_setupForMeasurement+0x78>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1df9      	adds	r1, r7, #7
 8003416:	2201      	movs	r2, #1
 8003418:	200c      	movs	r0, #12
 800341a:	4798      	blx	r3
	max30102_comm.write(MAX30102_REG_LED2_AMP, &data, 1); // ir led
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <max30102_setupForMeasurement+0x78>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	1df9      	adds	r1, r7, #7
 8003422:	2201      	movs	r2, #1
 8003424:	200d      	movs	r0, #13
 8003426:	4798      	blx	r3

}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200000fc 	.word	0x200000fc

08003434 <max30102_setMeasurementMode>:

void max30102_setMeasurementMode(uint8_t mode) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
	// make sure the mode is only 3 bits
	mode = mode & 0b111;
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	71fb      	strb	r3, [r7, #7]

	// update the measurement mode
	uint8_t data;
	max30102_comm.read(MAX30102_REG_MODE_CONF, &data, 1);
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <max30102_setMeasurementMode+0x4c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f107 010f 	add.w	r1, r7, #15
 800344e:	2201      	movs	r2, #1
 8003450:	2009      	movs	r0, #9
 8003452:	4798      	blx	r3
	data = (data & 0b11000000) | mode;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	b25b      	sxtb	r3, r3
 8003458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800345c:	b25a      	sxtb	r2, r3
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	4313      	orrs	r3, r2
 8003464:	b25b      	sxtb	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	73fb      	strb	r3, [r7, #15]
	max30102_comm.write(MAX30102_REG_MODE_CONF, &data, 1);
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <max30102_setMeasurementMode+0x4c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f107 010f 	add.w	r1, r7, #15
 8003472:	2201      	movs	r2, #1
 8003474:	2009      	movs	r0, #9
 8003476:	4798      	blx	r3
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	200000fc 	.word	0x200000fc

08003484 <max30102_waitAndGetHeartrateSamples>:
/**
 * waits until the FIFO queue as almost full, and then reads all 32 bytes
 *
 * @param buf		the buffer where the data is written to
 */
void max30102_waitAndGetHeartrateSamples(uint8_t *buf) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

	// wait for the A_FULL interrupt
	uint8_t data;
	while(1) {
		max30102_comm.readInterruptPin(&data);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <max30102_waitAndGetHeartrateSamples+0x38>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f107 020f 	add.w	r2, r7, #15
 8003494:	4610      	mov	r0, r2
 8003496:	4798      	blx	r3

		// break if we have an interrupt
		// TODO: check if interrupt is of type A_FULL, only needed if other interrupts are active
		if(data == 0) break;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <max30102_waitAndGetHeartrateSamples+0x22>

		// TODO: change/remove delay time
		HAL_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f7fd fb54 	bl	8000b4c <HAL_Delay>
	while(1) {
 80034a4:	e7f2      	b.n	800348c <max30102_waitAndGetHeartrateSamples+0x8>
		if(data == 0) break;
 80034a6:	bf00      	nop
	}

	// read the samples from the FIFO
	// TODO: reads the whole fifo, might need/want to read less bytes
	max30102_comm.read(MAX30102_REG_FIFO_DATA, buf, 32);
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <max30102_waitAndGetHeartrateSamples+0x38>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	2007      	movs	r0, #7
 80034b2:	4798      	blx	r3

}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200000fc 	.word	0x200000fc

080034c0 <sx1508b_setup_communication>:
 *
 * @param  setup   user defined setup struct (ptr)
 * @retval       	interface status (MANDATORY: return 0 -> no Error) TODO
 *
 */
void sx1508b_setup_communication(sx1508b_t *configs) {
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

	/* Save pointer to function globally */
	sx1508b_comm.read = configs->comm.read;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <sx1508b_setup_communication+0x24>)
 80034ce:	6053      	str	r3, [r2, #4]
	sx1508b_comm.write = configs->comm.write;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <sx1508b_setup_communication+0x24>)
 80034d6:	6013      	str	r3, [r2, #0]

	// TODO: Implement return if successful
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	20000108 	.word	0x20000108

080034e8 <sx1508b_read_pin>:
 * reads the value of the specified pin and writes it into the given data buffer
 *
 * @param pinNumber		number of the pin, whose value is read out
 * @param data			buffer where the value of the pin is stored into
 */
void sx1508b_read_pin(uint8_t pinNumber, uint8_t *data) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]

	// update the register value
	uint8_t currentSettings = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
	sx1508b_comm.read(SX1508B_REG_DATA, &currentSettings, 1);
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <sx1508b_read_pin+0x44>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f107 010f 	add.w	r1, r7, #15
 8003500:	2201      	movs	r2, #1
 8003502:	2008      	movs	r0, #8
 8003504:	4798      	blx	r3
	//TODO: doublecheck if this pointer access is correct
	*data = (currentSettings & (0b00000000 ^ (0b1 << pinNumber))) >> pinNumber;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	4619      	mov	r1, r3
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2201      	movs	r2, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	ea01 0203 	and.w	r2, r1, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	fa42 f303 	asr.w	r3, r2, r3
 800351c:	b2da      	uxtb	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	701a      	strb	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000108 	.word	0x20000108

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4d0d      	ldr	r5, [pc, #52]	; (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	; (800356c <__libc_init_array+0x3c>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2600      	movs	r6, #0
 800353c:	42a6      	cmp	r6, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4d0b      	ldr	r5, [pc, #44]	; (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	; (8003574 <__libc_init_array+0x44>)
 8003544:	f000 f820 	bl	8003588 <_init>
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2600      	movs	r6, #0
 800354e:	42a6      	cmp	r6, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f855 3b04 	ldr.w	r3, [r5], #4
 8003558:	4798      	blx	r3
 800355a:	3601      	adds	r6, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003562:	4798      	blx	r3
 8003564:	3601      	adds	r6, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	080035e0 	.word	0x080035e0
 800356c:	080035e0 	.word	0x080035e0
 8003570:	080035e0 	.word	0x080035e0
 8003574:	080035e4 	.word	0x080035e4

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
