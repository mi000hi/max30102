
MAX30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006280  08006280  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006288  08006288  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bf8  20000074  08006304  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c6c  08006304  00022c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015657  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2b  00000000  00000000  000356fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00038328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00039368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ca6  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a7e  00000000  00000000  00061f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef20c  00000000  00000000  000749b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a4  00000000  00000000  00163c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060c4 	.word	0x080060c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080060c4 	.word	0x080060c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <UART2_SendString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART2_SendString(char *s) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) s, strlen(s), 1000);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <UART2_SendString+0x28>)
 8000592:	f003 fa42 	bl	8003a1a <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200018e8 	.word	0x200018e8

080005a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005a4:	b598      	push	{r3, r4, r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a8:	f000 fd1b 	bl	8000fe2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ac:	f000 f858 	bl	8000660 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b0:	f000 f97e 	bl	80008b0 <MX_GPIO_Init>
	MX_SPI2_Init();
 80005b4:	f000 f90e 	bl	80007d4 <MX_SPI2_Init>
	MX_I2C3_Init();
 80005b8:	f000 f8cc 	bl	8000754 <MX_I2C3_Init>
	MX_USART1_UART_Init();
 80005bc:	f000 f948 	bl	8000850 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	UART2_SendString("MY OWN STRING\n\r");
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <main+0x8c>)
 80005c2:	f7ff ffd9 	bl	8000578 <UART2_SendString>

	/* Hand-over function pointer for sensor communication */
	max30102_configs.comm.read = max30102_read;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <main+0x90>)
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <main+0x94>)
 80005ca:	605a      	str	r2, [r3, #4]
	max30102_configs.comm.write = max30102_write;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <main+0x90>)
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <main+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]
	max30102_configs.comm.readInterruptPin = max30102_readInterruptPin;
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <main+0x90>)
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <main+0x9c>)
 80005d6:	609a      	str	r2, [r3, #8]

	khc_sx1508b_configs.comm.read = sx1508b_read;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0xa0>)
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <main+0xa4>)
 80005dc:	605a      	str	r2, [r3, #4]
	khc_sx1508b_configs.comm.write = sx1508b_write;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0xa0>)
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <main+0xa8>)
 80005e2:	601a      	str	r2, [r3, #0]

	/* setup max30102 heart rate sensor */
//	max30102_setup_communication(&max30102_configs);

	/* setup sx1508b gipo extender and check all configs */
	sx1508b_setup_communication(&khc_sx1508b_configs);
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0xa0>)
 80005e6:	f005 f8d5 	bl	8005794 <sx1508b_setup_communication>
	sx1508b_configure();
 80005ea:	f000 fa59 	bl	8000aa0 <sx1508b_configure>

	flashLED(100);
 80005ee:	2064      	movs	r0, #100	; 0x64
 80005f0:	f000 fa3c 	bl	8000a6c <flashLED>

	// initialize the MAX30102 HR sensor
	Max30102_Init(&hi2c3);
 80005f4:	4816      	ldr	r0, [pc, #88]	; (8000650 <main+0xac>)
 80005f6:	f004 f9d1 	bl	800499c <Max30102_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Max30102_Task();
 80005fa:	f004 f919 	bl	8004830 <Max30102_Task>
		sprintf(UartBuffer, "%c[2J%c[H", 27, 27);
 80005fe:	231b      	movs	r3, #27
 8000600:	221b      	movs	r2, #27
 8000602:	4914      	ldr	r1, [pc, #80]	; (8000654 <main+0xb0>)
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <main+0xb4>)
 8000606:	f005 f93d 	bl	8005884 <siprintf>
		UART2_SendString(UartBuffer);
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0xb4>)
 800060c:	f7ff ffb4 	bl	8000578 <UART2_SendString>

		sprintf(UartBuffer, "HR: %d\n\rSpO2: %d\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8000610:	f004 f8f6 	bl	8004800 <Max30102_GetHeartRate>
 8000614:	4604      	mov	r4, r0
 8000616:	f004 f8ff 	bl	8004818 <Max30102_GetSpO2Value>
 800061a:	4603      	mov	r3, r0
 800061c:	4622      	mov	r2, r4
 800061e:	490f      	ldr	r1, [pc, #60]	; (800065c <main+0xb8>)
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xb4>)
 8000622:	f005 f92f 	bl	8005884 <siprintf>
		UART2_SendString(UartBuffer);
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0xb4>)
 8000628:	f7ff ffa6 	bl	8000578 <UART2_SendString>
		Max30102_Task();
 800062c:	e7e5      	b.n	80005fa <main+0x56>
 800062e:	bf00      	nop
 8000630:	080060dc 	.word	0x080060dc
 8000634:	200018bc 	.word	0x200018bc
 8000638:	08000b59 	.word	0x08000b59
 800063c:	08000ba9 	.word	0x08000ba9
 8000640:	08000b85 	.word	0x08000b85
 8000644:	200018b4 	.word	0x200018b4
 8000648:	08000bd5 	.word	0x08000bd5
 800064c:	08000c01 	.word	0x08000c01
 8000650:	20001804 	.word	0x20001804
 8000654:	080060ec 	.word	0x080060ec
 8000658:	200018c8 	.word	0x200018c8
 800065c:	080060f8 	.word	0x080060f8

08000660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b0b8      	sub	sp, #224	; 0xe0
 8000664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f900 	bl	8005874 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000684:	463b      	mov	r3, r7
 8000686:	2288      	movs	r2, #136	; 0x88
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 f8f2 	bl	8005874 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000690:	2310      	movs	r3, #16
 8000692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006ba:	2328      	movs	r3, #40	; 0x28
 80006bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fe06 	bl	80022e8 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x86>
		Error_Handler();
 80006e2:	f000 faa3 	bl	8000c2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f9d2 	bl	8002ab4 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xba>
		Error_Handler();
 8000716:	f000 fa89 	bl	8000c2c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800071a:	f240 1301 	movw	r3, #257	; 0x101
 800071e:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_I2C3;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000724:	2300      	movs	r3, #0
 8000726:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fbc8 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xda>
		Error_Handler();
 8000736:	f000 fa79 	bl	8000c2c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800073a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073e:	f001 fd6d 	bl	800221c <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000748:	f000 fa70 	bl	8000c2c <Error_Handler>
	}
}
 800074c:	bf00      	nop
 800074e:	37e0      	adds	r7, #224	; 0xe0
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C3_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C3_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x10909CEC;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C3_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C3_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C3_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C3_Init+0x74>)
 8000790:	f000 ffc4 	bl	800171c <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C3_Init+0x4a>
		Error_Handler();
 800079a:	f000 fa47 	bl	8000c2c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C3_Init+0x74>)
 80007a2:	f001 fc95 	bl	80020d0 <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80007ac:	f000 fa3e 	bl	8000c2c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C3_Init+0x74>)
 80007b4:	f001 fcd7 	bl	8002166 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80007be:	f000 fa35 	bl	8000c2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20001804 	.word	0x20001804
 80007cc:	40005c00 	.word	0x40005c00
 80007d0:	10909cec 	.word	0x10909cec

080007d4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI2_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_SPI2_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI2_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI2_Init+0x74>)
 80007e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007ec:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI2_Init+0x74>)
 80007f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007f4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI2_Init+0x74>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI2_Init+0x74>)
 80007fe:	2201      	movs	r2, #1
 8000800:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI2_Init+0x74>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI2_Init+0x74>)
 800080c:	2218      	movs	r2, #24
 800080e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_SPI2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_SPI2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI2_Init+0x74>)
 8000824:	2207      	movs	r2, #7
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_SPI2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_SPI2_Init+0x74>)
 8000836:	f002 ffff 	bl	8003838 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI2_Init+0x70>
		Error_Handler();
 8000840:	f000 f9f4 	bl	8000c2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20001850 	.word	0x20001850
 800084c:	40003800 	.word	0x40003800

08000850 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART1_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_USART1_UART_Init+0x58>)
 8000894:	f003 f873 	bl	800397e <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800089e:	f000 f9c5 	bl	8000c2c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200018e8 	.word	0x200018e8
 80008ac:	40013800 	.word	0x40013800

080008b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008c6:	4b63      	ldr	r3, [pc, #396]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a62      	ldr	r2, [pc, #392]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b60      	ldr	r3, [pc, #384]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
	HAL_PWREx_EnableVddIO2();
 80008de:	f001 fcf3 	bl	80022c8 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	4843      	ldr	r0, [pc, #268]	; (8000a58 <MX_GPIO_Init+0x1a8>)
 800094a:	f000 fecf 	bl	80016ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BLUE_RST_GPIO_Port, BLUE_RST_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2101      	movs	r1, #1
 8000952:	4842      	ldr	r0, [pc, #264]	; (8000a5c <MX_GPIO_Init+0x1ac>)
 8000954:	f000 feca 	bl	80016ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CS_AG_Pin | BLUE_CS_Pin | CS_M_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f241 0106 	movw	r1, #4102	; 0x1006
 800095e:	4840      	ldr	r0, [pc, #256]	; (8000a60 <MX_GPIO_Init+0x1b0>)
 8000960:	f000 fec4 	bl	80016ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_P_GPIO_Port, CS_P_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2108      	movs	r1, #8
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 febe 	bl	80016ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_A_GPIO_Port, CS_A_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2110      	movs	r1, #16
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x1b4>)
 8000976:	f000 feb9 	bl	80016ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4831      	ldr	r0, [pc, #196]	; (8000a58 <MX_GPIO_Init+0x1a8>)
 8000994:	f000 fd00 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_RST_Pin */
	GPIO_InitStruct.Pin = BLUE_RST_Pin;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BLUE_RST_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	482b      	ldr	r0, [pc, #172]	; (8000a5c <MX_GPIO_Init+0x1ac>)
 80009b0:	f000 fcf2 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_BUTTON_Pin */
	GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_GPIO_Init+0x1b8>)
 80009ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <MX_GPIO_Init+0x1b4>)
 80009c8:	f000 fce6 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_AG_Pin BLUE_CS_Pin CS_M_Pin */
	GPIO_InitStruct.Pin = CS_AG_Pin | BLUE_CS_Pin | CS_M_Pin;
 80009cc:	f241 0306 	movw	r3, #4102	; 0x1006
 80009d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_GPIO_Init+0x1b0>)
 80009e6:	f000 fcd7 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_P_Pin */
	GPIO_InitStruct.Pin = CS_P_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_P_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fcc8 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : BLUE_IRQ_Pin */
	GPIO_InitStruct.Pin = BLUE_IRQ_Pin;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_GPIO_Init+0x1b8>)
 8000a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BLUE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0x1b4>)
 8000a1c:	f000 fcbc 	bl	8001398 <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_A_Pin */
	GPIO_InitStruct.Pin = CS_A_Pin;
 8000a20:	2310      	movs	r3, #16
 8000a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_A_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <MX_GPIO_Init+0x1b4>)
 8000a38:	f000 fcae 	bl	8001398 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2017      	movs	r0, #23
 8000a42:	f000 fc42 	bl	80012ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a46:	2017      	movs	r0, #23
 8000a48:	f000 fc5b 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48001800 	.word	0x48001800
 8000a5c:	48001c00 	.word	0x48001c00
 8000a60:	48000400 	.word	0x48000400
 8000a64:	48000800 	.word	0x48000800
 8000a68:	10110000 	.word	0x10110000

08000a6c <flashLED>:

/**
 * activates the LED for the specified amount of ms
 * @param duration		the duration of the LED to be ON, in ms
 */
void flashLED(uint32_t duration) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4808      	ldr	r0, [pc, #32]	; (8000a9c <flashLED+0x30>)
 8000a7c:	f000 fe36 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_Delay(duration);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fb23 	bl	80010cc <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <flashLED+0x30>)
 8000a8e:	f000 fe2d 	bl	80016ec <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	48001800 	.word	0x48001800

08000aa0 <sx1508b_configure>:

/**
 * configure the GPIO extender here
 */
void sx1508b_configure() {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

	uint8_t reg;

	// direction register -- set all gpio pins as outputs
	reg = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	sx1508b_write(SX1508B_REG_DIR, &reg, 1);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2007      	movs	r0, #7
 8000ab2:	f000 f8a5 	bl	8000c00 <sx1508b_write>

	// activate PWM
//	sx1508b_configure_clock(0b0100);
//	sx1508b_configure_pwm(0b100);
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <i2c_read>:
 * @param uint8_t reg: sensor register address from which the data will be read
 * @param uint8_t* buf: pointer to the buffer in which read data will be written
 * @param uint8_t* bytes: number of bytes which will be read
 */
HAL_StatusTypeDef i2c_read(uint8_t dev, uint8_t reg, uint8_t *buf,
		uint8_t bytes) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	603a      	str	r2, [r7, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	71bb      	strb	r3, [r7, #6]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	717b      	strb	r3, [r7, #5]

	// convert 7 bit device address to 16 bit address
	uint16_t DEVICE_ADDR = ((uint16_t) dev) << 1;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	81fb      	strh	r3, [r7, #14]

	// read data from device memory
	return HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf,
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	797b      	ldrb	r3, [r7, #5]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	89f9      	ldrh	r1, [r7, #14]
 8000ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aec:	9002      	str	r0, [sp, #8]
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2301      	movs	r3, #1
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <i2c_read+0x48>)
 8000af8:	f000 ffb4 	bl	8001a64 <HAL_I2C_Mem_Read>
 8000afc:	4603      	mov	r3, r0
			bytes, 1000);
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20001804 	.word	0x20001804

08000b0c <i2c_write>:
 * @param uint8_t reg: sensor register address to which the buffer will be written
 * @param uint8_t* buf: pointer to the buffer which contains the writing data
 * @param uint8_t* bytes: number of bytes which will be written
 */
HAL_StatusTypeDef i2c_write(uint8_t dev, uint8_t reg, uint8_t *buf,
		uint8_t bytes) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	603a      	str	r2, [r7, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	717b      	strb	r3, [r7, #5]

	// convert 7 bit device address to 16 bit address
	uint16_t DEVICE_ADDR = ((uint16_t) dev) << 1;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	81fb      	strh	r3, [r7, #14]

	// write data to device memory
	return HAL_I2C_Mem_Write(&hi2c3, DEVICE_ADDR, reg, I2C_MEMADD_SIZE_8BIT,
 8000b2a:	79bb      	ldrb	r3, [r7, #6]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	797b      	ldrb	r3, [r7, #5]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	89f9      	ldrh	r1, [r7, #14]
 8000b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b38:	9002      	str	r0, [sp, #8]
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <i2c_write+0x48>)
 8000b44:	f000 fe7a 	bl	800183c <HAL_I2C_Mem_Write>
 8000b48:	4603      	mov	r3, r0
			buf, bytes, 1000);

}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20001804 	.word	0x20001804

08000b58 <max30102_read>:
 * @brief User-defined i2c read function for MAX30102
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer in which read data will be written
 * @retval None
 */
void max30102_read(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
	err = i2c_read(MAX30102_ADDRESS_BASE, reg, buf, bytes);
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	79f9      	ldrb	r1, [r7, #7]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	2057      	movs	r0, #87	; 0x57
 8000b74:	f7ff ffa4 	bl	8000ac0 <i2c_read>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <max30102_readInterruptPin>:
/**
 * reads the value of the interrupt pin for the MAX30102 sensor
 *
 * @param buf	the buffer where the pin value is written to
 */
void max30102_readInterruptPin(uint8_t *buf) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	// TODO: uncomment once sx1508b driver is added
	sx1508b_read_pin(MX30102_PIN_INTERRUPT, buf);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <max30102_readInterruptPin+0x20>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 fe11 	bl	80057bc <sx1508b_read_pin>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <max30102_write>:
 * @brief User-defined i2c write function for MAX30102
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer which contains the writing data
 * @retval None
 */
void max30102_write(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
	err = i2c_write(MAX30102_ADDRESS_BASE, reg, buf, bytes);
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	79f9      	ldrb	r1, [r7, #7]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	2057      	movs	r0, #87	; 0x57
 8000bc4:	f7ff ffa2 	bl	8000b0c <i2c_write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <sx1508b_read>:
 * @brief User-defined i2c read function for SX1508B
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer in which read data will be written
 * @retval None
 */
void sx1508b_read(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
	err = i2c_read(SX1508B_ADDRESS_BASE << 2 | 0b00, reg, buf, bytes);
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	79f9      	ldrb	r1, [r7, #7]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	2020      	movs	r0, #32
 8000bf0:	f7ff ff66 	bl	8000ac0 <i2c_read>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <sx1508b_write>:
 * @brief User-defined i2c write function for SX1508B
 * @param uint8_t reg: 	gpio extender register address to which the buffer will be written
 * @param uint8_t* buf: 	pointer to the buffer which contains the writing data
 * @retval None
 */
void sx1508b_write(uint8_t reg, uint8_t *buf, uint8_t bytes) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef err = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
	err = i2c_write(SX1508B_ADDRESS_BASE << 2 | 0b00, reg, buf, bytes);
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	79f9      	ldrb	r1, [r7, #7]
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	2020      	movs	r0, #32
 8000c1c:	f7ff ff76 	bl	8000b0c <i2c_write>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]

	if (err != HAL_OK) {
		// TODO
	}

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_I2C_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d127      	bne.n	8000cf2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC1     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <HAL_I2C_MspInit+0x84>)
 8000cd6:	f000 fb5f 	bl	8001398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40005c00 	.word	0x40005c00
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000800 	.word	0x48000800

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x7c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d128      	bne.n	8000d7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_SPI_MspInit+0x80>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI_DATA_Pin|SPI_SCK_Pin;
 8000d5a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_SPI_MspInit+0x84>)
 8000d78:	f000 fb0e 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40003800 	.word	0x40003800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000400 	.word	0x48000400

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d146      	bne.n	8000e40 <HAL_UART_MspInit+0xb0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000de2:	f001 fa71 	bl	80022c8 <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e10:	2307      	movs	r3, #7
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000e1c:	f000 fabc 	bl	8001398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e30:	2307      	movs	r3, #7
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_UART_MspInit+0xc4>)
 8000e3c:	f000 faac 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48001800 	.word	0x48001800
 8000e54:	48000400 	.word	0x48000400

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8f2 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_5);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <EXTI9_5_IRQHandler+0x10>)
 8000eb2:	f000 fa41 	bl	8001338 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200017fc 	.word	0x200017fc

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f004 fc88 	bl	8005804 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20018000 	.word	0x20018000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000090 	.word	0x20000090
 8000f28:	20002c70 	.word	0x20002c70

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <SystemInit+0x5c>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <SystemInit+0x5c>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <SystemInit+0x60>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <SystemInit+0x60>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <SystemInit+0x60>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <SystemInit+0x60>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <SystemInit+0x60>)
 8000f58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <SystemInit+0x60>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <SystemInit+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <SystemInit+0x60>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SystemInit+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffca 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9a:	e003      	b.n	8000fa4 <LoopCopyDataInit>

08000f9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa2:	3104      	adds	r1, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000faa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fac:	d3f6      	bcc.n	8000f9c <CopyDataInit>
	ldr	r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb0:	e002      	b.n	8000fb8 <LoopFillZerobss>

08000fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb4:	f842 3b04 	str.w	r3, [r2], #4

08000fb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <LoopForever+0x16>)
	cmp	r2, r3
 8000fba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fbc:	d3f9      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f004 fc27 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff faef 	bl	80005a4 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fcc:	08006290 	.word	0x08006290
	ldr	r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000fd8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000fdc:	20002c6c 	.word	0x20002c6c

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f961 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fe18 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_InitTick+0x70>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f96d 	bl	800131e <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f000 f937 	bl	80012ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_InitTick+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e007      	b.n	8001074 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e004      	b.n	8001074 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e001      	b.n	8001074 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000004 	.word	0x20000004
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	2000196c 	.word	0x2000196c

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000196c 	.word	0x2000196c

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff3e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff31 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2201      	movs	r2, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	015a      	lsls	r2, r3, #5
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_EXTI_IRQHandler+0x5c>)
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4798      	blx	r3
    }
  }
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010414 	.word	0x40010414

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	e17f      	b.n	80016a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8171 	beq.w	80016a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d00b      	beq.n	80013e0 <HAL_GPIO_Init+0x48>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d4:	2b11      	cmp	r3, #17
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b12      	cmp	r3, #18
 80013de:	d130      	bne.n	8001442 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001416:	2201      	movs	r2, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 0201 	and.w	r2, r3, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b03      	cmp	r3, #3
 800144c:	d118      	bne.n	8001480 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x128>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80ac 	beq.w	80016a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a5e      	ldr	r2, [pc, #376]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001562:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x242>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x338>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x23e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_GPIO_Init+0x33c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x23a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x340>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x236>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x344>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x232>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x348>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x22e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x34c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x22a>
 80015be:	2306      	movs	r3, #6
 80015c0:	e00c      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e00a      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x244>
 80015da:	2300      	movs	r3, #0
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ec:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <HAL_GPIO_Init+0x350>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800161e:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <HAL_GPIO_Init+0x350>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_GPIO_Init+0x350>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_GPIO_Init+0x350>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_GPIO_Init+0x350>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_GPIO_Init+0x350>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x350>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_GPIO_Init+0x350>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f ae78 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	48001000 	.word	0x48001000
 80016e0:	48001400 	.word	0x48001400
 80016e4:	48001800 	.word	0x48001800
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e081      	b.n	8001832 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fa9c 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800176c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e006      	b.n	80017a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d104      	bne.n	80017b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	ea42 0103 	orr.w	r1, r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	021a      	lsls	r2, r3, #8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69d9      	ldr	r1, [r3, #28]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4603      	mov	r3, r0
 800184c:	817b      	strh	r3, [r7, #10]
 800184e:	460b      	mov	r3, r1
 8001850:	813b      	strh	r3, [r7, #8]
 8001852:	4613      	mov	r3, r2
 8001854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	f040 80f9 	bne.w	8001a56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_I2C_Mem_Write+0x34>
 800186a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ed      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_I2C_Mem_Write+0x4e>
 8001886:	2302      	movs	r3, #2
 8001888:	e0e6      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001892:	f7ff fc0f 	bl	80010b4 <HAL_GetTick>
 8001896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2319      	movs	r3, #25
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 fac3 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d1      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2221      	movs	r2, #33	; 0x21
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018dc:	88f8      	ldrh	r0, [r7, #6]
 80018de:	893a      	ldrh	r2, [r7, #8]
 80018e0:	8979      	ldrh	r1, [r7, #10]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4603      	mov	r3, r0
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f9d3 	bl	8001c98 <I2C_RequestMemoryWrite>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0a9      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d90e      	bls.n	800192c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	b2da      	uxtb	r2, r3
 800191a:	8979      	ldrh	r1, [r7, #10]
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fba5 	bl	8002074 <I2C_TransferConfig>
 800192a:	e00f      	b.n	800194c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	8979      	ldrh	r1, [r7, #10]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fb94 	bl	8002074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 faad 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e07b      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d034      	beq.n	8001a04 <HAL_I2C_Mem_Write+0x1c8>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d130      	bne.n	8001a04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fa3f 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04d      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d90e      	bls.n	80019e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fb49 	bl	8002074 <I2C_TransferConfig>
 80019e2:	e00f      	b.n	8001a04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fb38 	bl	8002074 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d19e      	bne.n	800194c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fa8c 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e01a      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2220      	movs	r2, #32
 8001a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_I2C_Mem_Write+0x224>)
 8001a36:	400b      	ands	r3, r1
 8001a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	fe00e800 	.word	0xfe00e800

08001a64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	817b      	strh	r3, [r7, #10]
 8001a76:	460b      	mov	r3, r1
 8001a78:	813b      	strh	r3, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	f040 80fd 	bne.w	8001c86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x34>
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0f1      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x4e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0ea      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aba:	f7ff fafb 	bl	80010b4 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2319      	movs	r3, #25
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f9af 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d5      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2222      	movs	r2, #34	; 0x22
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b04:	88f8      	ldrh	r0, [r7, #6]
 8001b06:	893a      	ldrh	r2, [r7, #8]
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	4603      	mov	r3, r0
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f913 	bl	8001d40 <I2C_RequestMemoryRead>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ad      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d90e      	bls.n	8001b54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	22ff      	movs	r2, #255	; 0xff
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <HAL_I2C_Mem_Read+0x22c>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fa91 	bl	8002074 <I2C_TransferConfig>
 8001b52:	e00f      	b.n	8001b74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_I2C_Mem_Read+0x22c>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa80 	bl	8002074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f956 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07c      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d130      	bne.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f927 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04d      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d90e      	bls.n	8001c14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa31 	bl	8002074 <I2C_TransferConfig>
 8001c12:	e00f      	b.n	8001c34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	8979      	ldrh	r1, [r7, #10]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa20 	bl	8002074 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d19a      	bne.n	8001b74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f974 	bl	8001f30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e01a      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2220      	movs	r2, #32
 8001c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_I2C_Mem_Read+0x230>)
 8001c66:	400b      	ands	r3, r1
 8001c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	80002400 	.word	0x80002400
 8001c94:	fe00e800 	.word	0xfe00e800

08001c98 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	460b      	mov	r3, r1
 8001cac:	813b      	strh	r3, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	8979      	ldrh	r1, [r7, #10]
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <I2C_RequestMemoryWrite+0xa4>)
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f9d7 	bl	8002074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f8f0 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e02c      	b.n	8001d34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cea:	e015      	b.n	8001d18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	69b9      	ldr	r1, [r7, #24]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f8d6 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e012      	b.n	8001d34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0e:	893b      	ldrh	r3, [r7, #8]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f884 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	80002000 	.word	0x80002000

08001d40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <I2C_RequestMemoryRead+0xa4>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2300      	movs	r3, #0
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f984 	bl	8002074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f89d 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e02c      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d86:	893b      	ldrh	r3, [r7, #8]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d90:	e015      	b.n	8001dbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d92:	893b      	ldrh	r3, [r7, #8]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f883 	bl	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e012      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f831 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	80002000 	.word	0x80002000

08001de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	619a      	str	r2, [r3, #24]
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	e022      	b.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e48:	d01e      	beq.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4a:	f7ff f933 	bl	80010b4 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d302      	bcc.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d113      	bne.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e00f      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d0cd      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ebc:	e02c      	b.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f870 	bl	8001fa8 <I2C_IsAcknowledgeFailed>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e02a      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f8eb 	bl	80010b4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d1cb      	bne.n	8001ebe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	e028      	b.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f830 	bl	8001fa8 <I2C_IsAcknowledgeFailed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e026      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f8af 	bl	80010b4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d1cf      	bne.n	8001f3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d151      	bne.n	8002066 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc2:	e022      	b.n	800200a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fca:	d01e      	beq.n	800200a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7ff f872 	bl	80010b4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_IsAcknowledgeFailed+0x3a>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d113      	bne.n	800200a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e02e      	b.n	8002068 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d1d5      	bne.n	8001fc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2210      	movs	r2, #16
 800201e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2220      	movs	r2, #32
 8002026:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fedd 	bl	8001de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <I2C_IsAcknowledgeFailed+0xc8>)
 800203a:	400b      	ands	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fe00e800 	.word	0xfe00e800

08002074 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	817b      	strh	r3, [r7, #10]
 8002082:	4613      	mov	r3, r2
 8002084:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <I2C_TransferConfig+0x58>)
 8002096:	430b      	orrs	r3, r1
 8002098:	43db      	mvns	r3, r3
 800209a:	ea02 0103 	and.w	r1, r2, r3
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a4:	7a7b      	ldrb	r3, [r7, #9]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	03ff63ff 	.word	0x03ff63ff

080020d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d138      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e032      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d139      	bne.n	80021f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002186:	2302      	movs	r3, #2
 8002188:	e033      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_PWREx_GetVoltageRange+0x18>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222a:	d130      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002238:	d038      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2232      	movs	r2, #50	; 0x32
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	e002      	b.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d102      	bne.n	800227c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f2      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	d110      	bne.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e00f      	b.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d007      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000
 80022c0:	20000004 	.word	0x20000004
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6053      	str	r3, [r2, #4]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e3d4      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fa:	4ba1      	ldr	r3, [pc, #644]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002304:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80e4 	beq.w	80024e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_RCC_OscConfig+0x4a>
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	f040 808b 	bne.w	8002440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 8087 	bne.w	8002440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002332:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x62>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e3ac      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1a      	ldr	r2, [r3, #32]
 800234e:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_RCC_OscConfig+0x7c>
 800235a:	4b89      	ldr	r3, [pc, #548]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002362:	e005      	b.n	8002370 <HAL_RCC_OscConfig+0x88>
 8002364:	4b86      	ldr	r3, [pc, #536]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	4293      	cmp	r3, r2
 8002372:	d223      	bcs.n	80023bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd41 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e38d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	4b7d      	ldr	r3, [pc, #500]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7c      	ldr	r2, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4977      	ldr	r1, [pc, #476]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	4972      	ldr	r1, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 80023ba:	e025      	b.n	8002408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6f      	ldr	r2, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	496a      	ldr	r1, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023da:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4965      	ldr	r1, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fd01 	bl	8002e00 <RCC_SetFlashLatencyFromMSIRange>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e34d      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002408:	f000 fc36 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b5c      	ldr	r3, [pc, #368]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	495a      	ldr	r1, [pc, #360]	; (8002584 <HAL_RCC_OscConfig+0x29c>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <HAL_RCC_OscConfig+0x2a0>)
 8002426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002428:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_RCC_OscConfig+0x2a4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fdf1 	bl	8001014 <HAL_InitTick>
 8002432:	4603      	mov	r3, r0
 8002434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d052      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	e331      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d032      	beq.n	80024ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002448:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002454:	f7fe fe2e 	bl	80010b4 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800245c:	f7fe fe2a 	bl	80010b4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e31a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	493b      	ldr	r1, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e01a      	b.n	80024e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a33      	ldr	r2, [pc, #204]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fdfb 	bl	80010b4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c2:	f7fe fdf7 	bl	80010b4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e2e7      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x1da>
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d074      	beq.n	80025da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x21a>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d10e      	bne.n	800251a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d064      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d160      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e2c4      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x24a>
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e01d      	b.n	800256e <HAL_RCC_OscConfig+0x286>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x26e>
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x286>
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a06      	ldr	r2, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x298>)
 8002568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7fe fd9d 	bl	80010b4 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257c:	e011      	b.n	80025a2 <HAL_RCC_OscConfig+0x2ba>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	0800610c 	.word	0x0800610c
 8002588:	20000004 	.word	0x20000004
 800258c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fd90 	bl	80010b4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e280      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a2:	4baf      	ldr	r3, [pc, #700]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x2a8>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fd80 	bl	80010b4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fd7c 	bl	80010b4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e26c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ca:	4ba5      	ldr	r3, [pc, #660]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2d0>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d060      	beq.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x310>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d119      	bne.n	8002626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d116      	bne.n	8002626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f8:	4b99      	ldr	r3, [pc, #612]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x328>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e249      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b93      	ldr	r3, [pc, #588]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	4990      	ldr	r1, [pc, #576]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002624:	e040      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d023      	beq.n	8002676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262e:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a8b      	ldr	r2, [pc, #556]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fd3b 	bl	80010b4 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fd37 	bl	80010b4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e227      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	4b82      	ldr	r3, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	497c      	ldr	r1, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a79      	ldr	r2, [pc, #484]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 800267c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fd17 	bl	80010b4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fd13 	bl	80010b4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e203      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269c:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03c      	beq.n	800272e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fcf2 	bl	80010b4 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7fe fcee 	bl	80010b4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e1de      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCC_OscConfig+0x3ec>
 80026f4:	e01b      	b.n	800272e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe fcd5 	bl	80010b4 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270e:	f7fe fcd1 	bl	80010b4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1c1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002720:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1ef      	bne.n	800270e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80a6 	beq.w	8002888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a43      	ldr	r2, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002764:	2301      	movs	r3, #1
 8002766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_OscConfig+0x57c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_OscConfig+0x57c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <HAL_RCC_OscConfig+0x57c>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002780:	f7fe fc98 	bl	80010b4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fc94 	bl	80010b4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e184      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279a:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HAL_RCC_OscConfig+0x57c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4d8>
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027be:	e024      	b.n	800280a <HAL_RCC_OscConfig+0x522>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d110      	bne.n	80027ea <HAL_RCC_OscConfig+0x502>
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e8:	e00f      	b.n	800280a <HAL_RCC_OscConfig+0x522>
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	4a17      	ldr	r2, [pc, #92]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fc4f 	bl	80010b4 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fc4b 	bl	80010b4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e139      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x578>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ed      	beq.n	800281a <HAL_RCC_OscConfig+0x532>
 800283e:	e01a      	b.n	8002876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe fc38 	bl	80010b4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002846:	e00f      	b.n	8002868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe fc34 	bl	80010b4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d906      	bls.n	8002868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e122      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002868:	4b90      	ldr	r3, [pc, #576]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e8      	bne.n	8002848 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	4a8a      	ldr	r2, [pc, #552]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002886:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8108 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 80d0 	bne.w	8002a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800289c:	4b83      	ldr	r3, [pc, #524]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d130      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	3b01      	subs	r3, #1
 80028bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d127      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11f      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028dc:	2a07      	cmp	r2, #7
 80028de:	bf14      	ite	ne
 80028e0:	2201      	movne	r2, #1
 80028e2:	2200      	moveq	r2, #0
 80028e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	3b01      	subs	r3, #1
 800290c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d06e      	beq.n	80029f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d069      	beq.n	80029ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002918:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002924:	4b61      	ldr	r3, [pc, #388]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b7      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002934:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5c      	ldr	r2, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800293a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800293e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002940:	f7fe fbb8 	bl	80010b4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fbb4 	bl	80010b4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0a4      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295a:	4b54      	ldr	r3, [pc, #336]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002966:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <HAL_RCC_OscConfig+0x7c8>)
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002976:	3a01      	subs	r2, #1
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002980:	0212      	lsls	r2, r2, #8
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002988:	0852      	lsrs	r2, r2, #1
 800298a:	3a01      	subs	r2, #1
 800298c:	0552      	lsls	r2, r2, #21
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002994:	0852      	lsrs	r2, r2, #1
 8002996:	3a01      	subs	r2, #1
 8002998:	0652      	lsls	r2, r2, #25
 800299a:	4311      	orrs	r1, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a0:	0912      	lsrs	r2, r2, #4
 80029a2:	0452      	lsls	r2, r2, #17
 80029a4:	430a      	orrs	r2, r1
 80029a6:	4941      	ldr	r1, [pc, #260]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029ac:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3e      	ldr	r2, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029c4:	f7fe fb76 	bl	80010b4 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fb72 	bl	80010b4 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e062      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ea:	e05a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e059      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d152      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a14:	f7fe fb4e 	bl	80010b4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fb4a 	bl	80010b4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e03a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x734>
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d02d      	beq.n	8002a9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a60:	f023 0303 	bic.w	r3, r3, #3
 8002a64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fb1d 	bl	80010b4 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7fe fb19 	bl	80010b4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x796>
 8002a9c:	e001      	b.n	8002aa2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	f99d808c 	.word	0xf99d808c

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0c8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4961      	ldr	r1, [pc, #388]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d04c      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d121      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e09e      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d115      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e092      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3c:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e086      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e07e      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	493f      	ldr	r1, [pc, #252]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6e:	f7fe faa1 	bl	80010b4 <HAL_GetTick>
 8002b72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b76:	f7fe fa9d 	bl	80010b4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e066      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 020c 	and.w	r2, r3, #12
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d1eb      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	492c      	ldr	r1, [pc, #176]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d210      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	4924      	ldr	r1, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e036      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4918      	ldr	r1, [pc, #96]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4910      	ldr	r1, [pc, #64]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2a:	f000 f825 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	490c      	ldr	r1, [pc, #48]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	5ccb      	ldrb	r3, [r1, r3]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe f9e0 	bl	8001014 <HAL_InitTick>
 8002c54:	4603      	mov	r3, r0
 8002c56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c58:	7afb      	ldrb	r3, [r7, #11]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	0800610c 	.word	0x0800610c
 8002c70:	20000004 	.word	0x20000004
 8002c74:	20000008 	.word	0x20000008

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c90:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0x34>
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d11e      	bne.n	8002cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cac:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb8:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10d      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	e004      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d134      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d003      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0xac>
 8002d1c:	e005      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d20:	617b      	str	r3, [r7, #20]
      break;
 8002d22:	e005      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d26:	617b      	str	r3, [r7, #20]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	617b      	str	r3, [r7, #20]
      break;
 8002d2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	fb02 f203 	mul.w	r2, r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	0e5b      	lsrs	r3, r3, #25
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	3301      	adds	r3, #1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d70:	69bb      	ldr	r3, [r7, #24]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08006124 	.word	0x08006124
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	0800611c 	.word	0x0800611c

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dd8:	f7ff ffda 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	0adb      	lsrs	r3, r3, #11
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800611c 	.word	0x0800611c

08002e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e18:	f7ff f9f2 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002e1c:	6178      	str	r0, [r7, #20]
 8002e1e:	e014      	b.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e2c:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e38:	f7ff f9e2 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d10b      	bne.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d919      	bls.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e5c:	d902      	bls.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e5e:	2302      	movs	r3, #2
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e013      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e64:	2301      	movs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e010      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d902      	bls.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e70:	2303      	movs	r3, #3
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e00a      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d102      	bne.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e004      	b.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b70      	cmp	r3, #112	; 0x70
 8002e86:	d101      	bne.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 0207 	bic.w	r2, r3, #7
 8002e94:	4909      	ldr	r1, [pc, #36]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d001      	beq.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40022000 	.word	0x40022000

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ecc:	2300      	movs	r3, #0
 8002ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d041      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee4:	d02a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ee6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eea:	d824      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef6:	d81e      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f00:	d010      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f02:	e018      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f04:	4b86      	ldr	r3, [pc, #536]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a85      	ldr	r2, [pc, #532]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f10:	e015      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fabb 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f22:	e00c      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3320      	adds	r3, #32
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fba6 	bl	800367c <RCCEx_PLLSAI2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f34:	e003      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	74fb      	strb	r3, [r7, #19]
      break;
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f44:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	4973      	ldr	r1, [pc, #460]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f5a:	e001      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d041      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f74:	d02a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f86:	d81e      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa0:	e015      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa73 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb2:	e00c      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3320      	adds	r3, #32
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fb5e 	bl	800367c <RCCEx_PLLSAI2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fd4:	4b52      	ldr	r3, [pc, #328]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe2:	494f      	ldr	r1, [pc, #316]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fea:	e001      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a0 	beq.w	800313e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a40      	ldr	r2, [pc, #256]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003030:	2301      	movs	r3, #1
 8003032:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003034:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003040:	f7fe f838 	bl	80010b4 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003046:	e009      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe f834 	bl	80010b4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	74fb      	strb	r3, [r7, #19]
        break;
 800305a:	e005      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d15c      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01f      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	429a      	cmp	r2, r3
 800308a:	d019      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fd fff3 	bl	80010b4 <HAL_GetTick>
 80030ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d0:	e00b      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fd ffef 	bl	80010b4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d902      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	74fb      	strb	r3, [r7, #19]
            break;
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ec      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310e:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003116:	e009      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
 800311c:	e006      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312c:	7c7b      	ldrb	r3, [r7, #17]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003132:	4b9e      	ldr	r3, [pc, #632]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	4a9d      	ldr	r2, [pc, #628]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800314a:	4b98      	ldr	r3, [pc, #608]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f023 0203 	bic.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	4994      	ldr	r1, [pc, #592]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800316c:	4b8f      	ldr	r3, [pc, #572]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f023 020c 	bic.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	498c      	ldr	r1, [pc, #560]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800318e:	4b87      	ldr	r3, [pc, #540]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4983      	ldr	r1, [pc, #524]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b0:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	497b      	ldr	r1, [pc, #492]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	4972      	ldr	r1, [pc, #456]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031f4:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	496a      	ldr	r1, [pc, #424]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	4961      	ldr	r1, [pc, #388]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003238:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	4959      	ldr	r1, [pc, #356]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800325a:	4b54      	ldr	r3, [pc, #336]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003260:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	4950      	ldr	r1, [pc, #320]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	4948      	ldr	r1, [pc, #288]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	493f      	ldr	r1, [pc, #252]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d028      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c0:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ce:	4937      	ldr	r1, [pc, #220]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032de:	d106      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e0:	4b32      	ldr	r3, [pc, #200]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ea:	60d3      	str	r3, [r2, #12]
 80032ec:	e011      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f8c8 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d028      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	491f      	ldr	r1, [pc, #124]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333c:	d106      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003348:	60d3      	str	r3, [r2, #12]
 800334a:	e011      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f899 	bl	8003494 <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003366:	7cfb      	ldrb	r3, [r7, #19]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02b      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d109      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a02      	ldr	r2, [pc, #8]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	e014      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f867 	bl	8003494 <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02f      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ee:	4928      	ldr	r1, [pc, #160]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fe:	d10d      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f844 	bl	8003494 <RCCEx_PLLSAI1_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d014      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	74bb      	strb	r3, [r7, #18]
 800341a:	e011      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003424:	d10c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3320      	adds	r3, #32
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f925 	bl	800367c <RCCEx_PLLSAI2_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345a:	490d      	ldr	r1, [pc, #52]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003486:	7cbb      	ldrb	r3, [r7, #18]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000

08003494 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a2:	4b75      	ldr	r3, [pc, #468]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
       ||
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034c6:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
       ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d047      	beq.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d018      	beq.n	800351a <RCCEx_PLLSAI1_Config+0x86>
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d825      	bhi.n	8003538 <RCCEx_PLLSAI1_Config+0xa4>
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d002      	beq.n	80034f6 <RCCEx_PLLSAI1_Config+0x62>
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d009      	beq.n	8003508 <RCCEx_PLLSAI1_Config+0x74>
 80034f4:	e020      	b.n	8003538 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11d      	bne.n	800353e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003506:	e01a      	b.n	800353e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003508:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d116      	bne.n	8003542 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003518:	e013      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003536:	e006      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e004      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003546:	bf00      	nop
    }

    if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800354e:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	430b      	orrs	r3, r1
 8003564:	4944      	ldr	r1, [pc, #272]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d17d      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fd fd9a 	bl	80010b4 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003584:	f7fd fd96 	bl	80010b4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
        break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003598:	4b37      	ldr	r3, [pc, #220]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ef      	bne.n	8003584 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d160      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
 80035c0:	0211      	lsls	r1, r2, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	0912      	lsrs	r2, r2, #4
 80035c8:	0452      	lsls	r2, r2, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	492a      	ldr	r1, [pc, #168]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	610b      	str	r3, [r1, #16]
 80035d2:	e027      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d112      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	0211      	lsls	r1, r2, #8
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6912      	ldr	r2, [r2, #16]
 80035f0:	0852      	lsrs	r2, r2, #1
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	430a      	orrs	r2, r1
 80035f8:	491f      	ldr	r1, [pc, #124]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
 80035fe:	e011      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	0211      	lsls	r1, r2, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6952      	ldr	r2, [r2, #20]
 8003616:	0852      	lsrs	r2, r2, #1
 8003618:	3a01      	subs	r2, #1
 800361a:	0652      	lsls	r2, r2, #25
 800361c:	430a      	orrs	r2, r1
 800361e:	4916      	ldr	r1, [pc, #88]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003624:	4b14      	ldr	r3, [pc, #80]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd fd40 	bl	80010b4 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003636:	e009      	b.n	800364c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003638:	f7fd fd3c 	bl	80010b4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	73fb      	strb	r3, [r7, #15]
          break;
 800364a:	e005      	b.n	8003658 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d018      	beq.n	80036c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d10d      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
       ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
       ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d047      	beq.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e044      	b.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d018      	beq.n	8003702 <RCCEx_PLLSAI2_Config+0x86>
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d825      	bhi.n	8003720 <RCCEx_PLLSAI2_Config+0xa4>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <RCCEx_PLLSAI2_Config+0x62>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d009      	beq.n	80036f0 <RCCEx_PLLSAI2_Config+0x74>
 80036dc:	e020      	b.n	8003720 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11d      	bne.n	8003726 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ee:	e01a      	b.n	8003726 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e013      	b.n	800372a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800370e:	4b49      	ldr	r3, [pc, #292]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800371e:	e006      	b.n	800372e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      break;
 8003724:	e004      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	430b      	orrs	r3, r1
 800374c:	4939      	ldr	r1, [pc, #228]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d167      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a35      	ldr	r2, [pc, #212]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd fca6 	bl	80010b4 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800376a:	e009      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800376c:	f7fd fca2 	bl	80010b4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	73fb      	strb	r3, [r7, #15]
        break;
 800377e:	e005      	b.n	800378c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ef      	bne.n	800376c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d14a      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003798:	4b26      	ldr	r3, [pc, #152]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
 80037a8:	0211      	lsls	r1, r2, #8
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68d2      	ldr	r2, [r2, #12]
 80037ae:	0912      	lsrs	r2, r2, #4
 80037b0:	0452      	lsls	r2, r2, #17
 80037b2:	430a      	orrs	r2, r1
 80037b4:	491f      	ldr	r1, [pc, #124]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	614b      	str	r3, [r1, #20]
 80037ba:	e011      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6912      	ldr	r2, [r2, #16]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0652      	lsls	r2, r2, #25
 80037d8:	430a      	orrs	r2, r1
 80037da:	4916      	ldr	r1, [pc, #88]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a13      	ldr	r2, [pc, #76]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fc62 	bl	80010b4 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f4:	f7fd fc5e 	bl	80010b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
          break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	4904      	ldr	r1, [pc, #16]	; (8003834 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e095      	b.n	8003976 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385a:	d009      	beq.n	8003870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
 8003862:	e005      	b.n	8003870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fa3c 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b0:	d902      	bls.n	80038b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e002      	b.n	80038be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038c6:	d007      	beq.n	80038d8 <HAL_SPI_Init+0xa0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	ea42 0103 	orr.w	r1, r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	f003 0204 	and.w	r2, r3, #4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003954:	ea42 0103 	orr.w	r1, r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e040      	b.n	8003a12 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd f9f5 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8c1 	bl	8003b44 <UART_SetConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e022      	b.n	8003a12 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb3f 	bl	8004058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fbc6 	bl	800419c <UART_CheckIdleState>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08a      	sub	sp, #40	; 0x28
 8003a1e:	af02      	add	r7, sp, #8
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 8082 	bne.w	8003b38 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Transmit+0x26>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e07a      	b.n	8003b3a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Transmit+0x38>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e073      	b.n	8003b3a <HAL_UART_Transmit+0x120>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fb24 	bl	80010b4 <HAL_GetTick>
 8003a6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d108      	bne.n	8003a9a <HAL_UART_Transmit+0x80>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d104      	bne.n	8003a9a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e003      	b.n	8003aa2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aaa:	e02d      	b.n	8003b08 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fbb9 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e039      	b.n	8003b3a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3302      	adds	r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e008      	b.n	8003af6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b292      	uxth	r2, r2
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1cb      	bne.n	8003aac <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fb85 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e005      	b.n	8003b3a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4bad      	ldr	r3, [pc, #692]	; (8003e24 <UART_SetConfig+0x2e0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	69f9      	ldr	r1, [r7, #28]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4aa2      	ldr	r2, [pc, #648]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a99      	ldr	r2, [pc, #612]	; (8003e2c <UART_SetConfig+0x2e8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d121      	bne.n	8003c0e <UART_SetConfig+0xca>
 8003bca:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d817      	bhi.n	8003c08 <UART_SetConfig+0xc4>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <UART_SetConfig+0x9c>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003bfd 	.word	0x08003bfd
 8003be8:	08003bf7 	.word	0x08003bf7
 8003bec:	08003c03 	.word	0x08003c03
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e0e7      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	76fb      	strb	r3, [r7, #27]
 8003bfa:	e0e4      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e0e1      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c02:	2308      	movs	r3, #8
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e0de      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	e0db      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a88      	ldr	r2, [pc, #544]	; (8003e34 <UART_SetConfig+0x2f0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d132      	bne.n	8003c7e <UART_SetConfig+0x13a>
 8003c18:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d828      	bhi.n	8003c78 <UART_SetConfig+0x134>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xe8>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c79 	.word	0x08003c79
 8003c34:	08003c79 	.word	0x08003c79
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c67 	.word	0x08003c67
 8003c50:	08003c79 	.word	0x08003c79
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003c79 	.word	0x08003c79
 8003c5c:	08003c73 	.word	0x08003c73
 8003c60:	2300      	movs	r3, #0
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	e0af      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c66:	2302      	movs	r3, #2
 8003c68:	76fb      	strb	r3, [r7, #27]
 8003c6a:	e0ac      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	76fb      	strb	r3, [r7, #27]
 8003c70:	e0a9      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c72:	2308      	movs	r3, #8
 8003c74:	76fb      	strb	r3, [r7, #27]
 8003c76:	e0a6      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e0a3      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6d      	ldr	r2, [pc, #436]	; (8003e38 <UART_SetConfig+0x2f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d120      	bne.n	8003cca <UART_SetConfig+0x186>
 8003c88:	4b69      	ldr	r3, [pc, #420]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c92:	2b30      	cmp	r3, #48	; 0x30
 8003c94:	d013      	beq.n	8003cbe <UART_SetConfig+0x17a>
 8003c96:	2b30      	cmp	r3, #48	; 0x30
 8003c98:	d814      	bhi.n	8003cc4 <UART_SetConfig+0x180>
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d009      	beq.n	8003cb2 <UART_SetConfig+0x16e>
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d810      	bhi.n	8003cc4 <UART_SetConfig+0x180>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <UART_SetConfig+0x168>
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d006      	beq.n	8003cb8 <UART_SetConfig+0x174>
 8003caa:	e00b      	b.n	8003cc4 <UART_SetConfig+0x180>
 8003cac:	2300      	movs	r3, #0
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e089      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	76fb      	strb	r3, [r7, #27]
 8003cb6:	e086      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e083      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e080      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	76fb      	strb	r3, [r7, #27]
 8003cc8:	e07d      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <UART_SetConfig+0x2f8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d120      	bne.n	8003d16 <UART_SetConfig+0x1d2>
 8003cd4:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cde:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce0:	d013      	beq.n	8003d0a <UART_SetConfig+0x1c6>
 8003ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce4:	d814      	bhi.n	8003d10 <UART_SetConfig+0x1cc>
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d009      	beq.n	8003cfe <UART_SetConfig+0x1ba>
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d810      	bhi.n	8003d10 <UART_SetConfig+0x1cc>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <UART_SetConfig+0x1b4>
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d006      	beq.n	8003d04 <UART_SetConfig+0x1c0>
 8003cf6:	e00b      	b.n	8003d10 <UART_SetConfig+0x1cc>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	76fb      	strb	r3, [r7, #27]
 8003cfc:	e063      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	76fb      	strb	r3, [r7, #27]
 8003d02:	e060      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d04:	2304      	movs	r3, #4
 8003d06:	76fb      	strb	r3, [r7, #27]
 8003d08:	e05d      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	76fb      	strb	r3, [r7, #27]
 8003d0e:	e05a      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d10:	2310      	movs	r3, #16
 8003d12:	76fb      	strb	r3, [r7, #27]
 8003d14:	e057      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a49      	ldr	r2, [pc, #292]	; (8003e40 <UART_SetConfig+0x2fc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d125      	bne.n	8003d6c <UART_SetConfig+0x228>
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2e:	d017      	beq.n	8003d60 <UART_SetConfig+0x21c>
 8003d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d34:	d817      	bhi.n	8003d66 <UART_SetConfig+0x222>
 8003d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3a:	d00b      	beq.n	8003d54 <UART_SetConfig+0x210>
 8003d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d40:	d811      	bhi.n	8003d66 <UART_SetConfig+0x222>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <UART_SetConfig+0x20a>
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d006      	beq.n	8003d5a <UART_SetConfig+0x216>
 8003d4c:	e00b      	b.n	8003d66 <UART_SetConfig+0x222>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	76fb      	strb	r3, [r7, #27]
 8003d52:	e038      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d54:	2302      	movs	r3, #2
 8003d56:	76fb      	strb	r3, [r7, #27]
 8003d58:	e035      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	76fb      	strb	r3, [r7, #27]
 8003d5e:	e032      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d60:	2308      	movs	r3, #8
 8003d62:	76fb      	strb	r3, [r7, #27]
 8003d64:	e02f      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d66:	2310      	movs	r3, #16
 8003d68:	76fb      	strb	r3, [r7, #27]
 8003d6a:	e02c      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d125      	bne.n	8003dc2 <UART_SetConfig+0x27e>
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <UART_SetConfig+0x2ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d84:	d017      	beq.n	8003db6 <UART_SetConfig+0x272>
 8003d86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d8a:	d817      	bhi.n	8003dbc <UART_SetConfig+0x278>
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	d00b      	beq.n	8003daa <UART_SetConfig+0x266>
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d96:	d811      	bhi.n	8003dbc <UART_SetConfig+0x278>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <UART_SetConfig+0x260>
 8003d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da0:	d006      	beq.n	8003db0 <UART_SetConfig+0x26c>
 8003da2:	e00b      	b.n	8003dbc <UART_SetConfig+0x278>
 8003da4:	2300      	movs	r3, #0
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e00d      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003daa:	2302      	movs	r3, #2
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	e00a      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003db0:	2304      	movs	r3, #4
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e007      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003db6:	2308      	movs	r3, #8
 8003db8:	76fb      	strb	r3, [r7, #27]
 8003dba:	e004      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e001      	b.n	8003dc6 <UART_SetConfig+0x282>
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <UART_SetConfig+0x2e4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 8087 	bne.w	8003ee0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dd2:	7efb      	ldrb	r3, [r7, #27]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d837      	bhi.n	8003e48 <UART_SetConfig+0x304>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x29c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e49 	.word	0x08003e49
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e13 	.word	0x08003e13
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003e49 	.word	0x08003e49
 8003e00:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e04:	f7fe ffd0 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003e08:	6178      	str	r0, [r7, #20]
        break;
 8003e0a:	e022      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x300>)
 8003e0e:	617b      	str	r3, [r7, #20]
        break;
 8003e10:	e01f      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe ff31 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003e16:	6178      	str	r0, [r7, #20]
        break;
 8003e18:	e01b      	b.n	8003e52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	617b      	str	r3, [r7, #20]
        break;
 8003e20:	e017      	b.n	8003e52 <UART_SetConfig+0x30e>
 8003e22:	bf00      	nop
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40004400 	.word	0x40004400
 8003e38:	40004800 	.word	0x40004800
 8003e3c:	40004c00 	.word	0x40004c00
 8003e40:	40005000 	.word	0x40005000
 8003e44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	76bb      	strb	r3, [r7, #26]
        break;
 8003e50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80f1 	beq.w	800403c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d305      	bcc.n	8003e76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d902      	bls.n	8003e7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	76bb      	strb	r3, [r7, #26]
 8003e7a:	e0df      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	020b      	lsls	r3, r1, #8
 8003e8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e92:	0202      	lsls	r2, r0, #8
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	6849      	ldr	r1, [r1, #4]
 8003e98:	0849      	lsrs	r1, r1, #1
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	1814      	adds	r4, r2, r0
 8003ea2:	eb43 0501 	adc.w	r5, r3, r1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	f7fc f9e4 	bl	8000280 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d308      	bcc.n	8003eda <UART_SetConfig+0x396>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ece:	d204      	bcs.n	8003eda <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e0b0      	b.n	800403c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	76bb      	strb	r3, [r7, #26]
 8003ede:	e0ad      	b.n	800403c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee8:	d15c      	bne.n	8003fa4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d828      	bhi.n	8003f42 <UART_SetConfig+0x3fe>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x3b4>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe ff44 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003f20:	6178      	str	r0, [r7, #20]
        break;
 8003f22:	e013      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe ff56 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8003f28:	6178      	str	r0, [r7, #20]
        break;
 8003f2a:	e00f      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <UART_SetConfig+0x510>)
 8003f2e:	617b      	str	r3, [r7, #20]
        break;
 8003f30:	e00c      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe fea1 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003f36:	6178      	str	r0, [r7, #20]
        break;
 8003f38:	e008      	b.n	8003f4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	617b      	str	r3, [r7, #20]
        break;
 8003f40:	e004      	b.n	8003f4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	76bb      	strb	r3, [r7, #26]
        break;
 8003f4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d074      	beq.n	800403c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005a      	lsls	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	441a      	add	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b0f      	cmp	r3, #15
 8003f6e:	d916      	bls.n	8003f9e <UART_SetConfig+0x45a>
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f76:	d212      	bcs.n	8003f9e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f023 030f 	bic.w	r3, r3, #15
 8003f80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	89fa      	ldrh	r2, [r7, #14]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e04e      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	76bb      	strb	r3, [r7, #26]
 8003fa2:	e04b      	b.n	800403c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa4:	7efb      	ldrb	r3, [r7, #27]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d827      	bhi.n	8003ffa <UART_SetConfig+0x4b6>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <UART_SetConfig+0x46c>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7fe fee8 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	6178      	str	r0, [r7, #20]
        break;
 8003fda:	e013      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fefa 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	6178      	str	r0, [r7, #20]
        break;
 8003fe2:	e00f      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <UART_SetConfig+0x510>)
 8003fe6:	617b      	str	r3, [r7, #20]
        break;
 8003fe8:	e00c      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe fe45 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003fee:	6178      	str	r0, [r7, #20]
        break;
 8003ff0:	e008      	b.n	8004004 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff6:	617b      	str	r3, [r7, #20]
        break;
 8003ff8:	e004      	b.n	8004004 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	76bb      	strb	r3, [r7, #26]
        break;
 8004002:	bf00      	nop
    }

    if (pclk != 0U)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085a      	lsrs	r2, r3, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d908      	bls.n	8004038 <UART_SetConfig+0x4f4>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d204      	bcs.n	8004038 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	e001      	b.n	800403c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004048:	7ebb      	ldrb	r3, [r7, #26]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bdb0      	pop	{r4, r5, r7, pc}
 8004052:	bf00      	nop
 8004054:	00f42400 	.word	0x00f42400

08004058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01a      	beq.n	800416e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d10a      	bne.n	800416e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
  }
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041ac:	f7fc ff82 	bl	80010b4 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10e      	bne.n	80041de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f82d 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e023      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d10e      	bne.n	800420a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f817 	bl	800422e <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00d      	b.n	8004226 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	e05e      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004246:	d05a      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004248:	f7fc ff34 	bl	80010b4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <UART_WaitOnFlagUntilTimeout+0x30>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11b      	bne.n	8004296 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800426c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e043      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02c      	beq.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b2:	d124      	bne.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e00f      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	429a      	cmp	r2, r3
 800431a:	d091      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <Max30102_WriteReg>:
	MAX30102_STATE_COLLECT_NEXT_PORTION
} MAX30102_STATE;

MAX30102_STATE StateMachine;

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af04      	add	r7, sp, #16
 800432e:	4603      	mov	r3, r0
 8004330:	460a      	mov	r2, r1
 8004332:	71fb      	strb	r3, [r7, #7]
 8004334:	4613      	mov	r3, r2
 8004336:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1,
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <Max30102_WriteReg+0x40>)
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	b29a      	uxth	r2, r3
 8004340:	2301      	movs	r3, #1
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	2301      	movs	r3, #1
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2301      	movs	r3, #1
 800434e:	21ae      	movs	r1, #174	; 0xae
 8004350:	f7fd fa74 	bl	800183c <HAL_I2C_Mem_Write>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <Max30102_WriteReg+0x36>
			&uch_data, 1, I2C_TIMEOUT) == HAL_OK)
		return MAX30102_OK;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20001974 	.word	0x20001974

0800436c <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af04      	add	r7, sp, #16
 8004372:	4603      	mov	r3, r0
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data,
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <Max30102_ReadReg+0x3c>)
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	b29a      	uxth	r2, r3
 8004380:	2301      	movs	r3, #1
 8004382:	9302      	str	r3, [sp, #8]
 8004384:	2301      	movs	r3, #1
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2301      	movs	r3, #1
 800438e:	21ae      	movs	r1, #174	; 0xae
 8004390:	f7fd fb68 	bl	8001a64 <HAL_I2C_Mem_Read>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <Max30102_ReadReg+0x32>
			1, I2C_TIMEOUT) == HAL_OK)
		return MAX30102_OK;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20001974 	.word	0x20001974

080043ac <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit,
		uint8_t Value) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
 80043b6:	460b      	mov	r3, r1
 80043b8:	71bb      	strb	r3, [r7, #6]
 80043ba:	4613      	mov	r3, r2
 80043bc:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 80043be:	f107 020f 	add.w	r2, r7, #15
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ffd0 	bl	800436c <Max30102_ReadReg>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e025      	b.n	8004422 <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1 << Bit);
 80043d6:	79bb      	ldrb	r3, [r7, #6]
 80043d8:	2201      	movs	r2, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	b25a      	sxtb	r2, r3
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	b25b      	sxtb	r3, r3
 80043e8:	4013      	ands	r3, r2
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x01) << Bit;
 80043f0:	797b      	ldrb	r3, [r7, #5]
 80043f2:	f003 0201 	and.w	r2, r3, #1
 80043f6:	79bb      	ldrb	r3, [r7, #6]
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	b25a      	sxtb	r2, r3
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	b25b      	sxtb	r3, r3
 8004402:	4313      	orrs	r3, r2
 8004404:	b25b      	sxtb	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(Register, tmp))
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff89 	bl	8004328 <Max30102_WriteReg>
 8004416:	4603      	mov	r3, r0
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <Max30102_SetIntAlmostFullEnabled>:
}

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable) {
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	461a      	mov	r2, r3
 8004438:	2107      	movs	r1, #7
 800443a:	2002      	movs	r0, #2
 800443c:	f7ff ffb6 	bl	80043ac <Max30102_WriteRegisterBit>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable) {
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	461a      	mov	r2, r3
 8004458:	2106      	movs	r1, #6
 800445a:	2002      	movs	r0, #2
 800445c:	f7ff ffa6 	bl	80043ac <Max30102_WriteRegisterBit>
 8004460:	4603      	mov	r3, r0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <Max30102_FifoWritePointer>:
}

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address) {
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR, (Address & 0x1F))) //FIFO_WR_PTR[4:0]
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	2004      	movs	r0, #4
 8004480:	f7ff ff52 	bl	8004328 <Max30102_WriteReg>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <Max30102_FifoWritePointer+0x24>
		return MAX30102_ERROR;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER, (Address & 0x1F))) //OVF_COUNTER[4:0]
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	2005      	movs	r0, #5
 80044ae:	f7ff ff3b 	bl	8004328 <Max30102_WriteReg>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <Max30102_FifoOverflowCounter+0x24>
		return MAX30102_ERROR;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 80044bc:	2301      	movs	r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address) {
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	4603      	mov	r3, r0
 80044ce:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR, (Address & 0x1F))) //FIFO_RD_PTR[4:0]
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	2006      	movs	r0, #6
 80044dc:	f7ff ff24 	bl	8004328 <Max30102_WriteReg>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <Max30102_FifoReadPointer+0x24>
		return MAX30102_ERROR;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 80044fe:	f107 030f 	add.w	r3, r7, #15
 8004502:	4619      	mov	r1, r3
 8004504:	2008      	movs	r0, #8
 8004506:	f7ff ff31 	bl	800436c <Max30102_ReadReg>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 8004510:	2300      	movs	r3, #0
 8004512:	e018      	b.n	8004546 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	f023 0307 	bic.w	r3, r3, #7
 800451a:	b2db      	uxtb	r3, r3
 800451c:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x07) << 5;
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	b25a      	sxtb	r2, r3
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	b25b      	sxtb	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b25b      	sxtb	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	4619      	mov	r1, r3
 8004534:	2008      	movs	r0, #8
 8004536:	f7ff fef7 	bl	8004328 <Max30102_WriteReg>
 800453a:	4603      	mov	r3, r0
 800453c:	2b01      	cmp	r3, #1
 800453e:	d001      	beq.n	8004544 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 8004544:	2301      	movs	r3, #1
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable) {
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG,
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	2104      	movs	r1, #4
 8004564:	2008      	movs	r0, #8
 8004566:	f7ff ff21 	bl	80043ac <Max30102_WriteRegisterBit>
 800456a:	4603      	mov	r3, r0
	FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	if (Value < 17)
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	2b10      	cmp	r3, #16
 8004582:	d801      	bhi.n	8004588 <Max30102_FifoAlmostFullValue+0x14>
		Value = 17;
 8004584:	2311      	movs	r3, #17
 8004586:	71fb      	strb	r3, [r7, #7]
	if (Value > 32)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b20      	cmp	r3, #32
 800458c:	d901      	bls.n	8004592 <Max30102_FifoAlmostFullValue+0x1e>
		Value = 32;
 800458e:	2320      	movs	r3, #32
 8004590:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f1c3 0320 	rsb	r3, r3, #32
 8004598:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800459a:	f107 030f 	add.w	r3, r7, #15
 800459e:	4619      	mov	r1, r3
 80045a0:	2008      	movs	r0, #8
 80045a2:	f7ff fee3 	bl	800436c <Max30102_ReadReg>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e01a      	b.n	80045e6 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	f023 030f 	bic.w	r3, r3, #15
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	b25a      	sxtb	r2, r3
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	4619      	mov	r1, r3
 80045d4:	2008      	movs	r0, #8
 80045d6:	f7ff fea7 	bl	8004328 <Max30102_WriteReg>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 80045e4:	2301      	movs	r3, #1
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <Max30102_Reset>:
MAX30102_STATUS Max30102_ShutdownMode(uint8_t Enable) {
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT,
			(Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void) {
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 80045f4:	23ff      	movs	r3, #255	; 0xff
 80045f6:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, 0x40))
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	2009      	movs	r0, #9
 80045fc:	f7ff fe94 	bl	8004328 <Max30102_WriteReg>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <Max30102_Reset+0x1c>
		return MAX30102_ERROR;
 8004606:	2300      	movs	r3, #0
 8004608:	e00f      	b.n	800462a <Max30102_Reset+0x3c>
	do {
		if (MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	4619      	mov	r1, r3
 800460e:	2009      	movs	r0, #9
 8004610:	f7ff feac 	bl	800436c <Max30102_ReadReg>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <Max30102_Reset+0x30>
			return MAX30102_ERROR;
 800461a:	2300      	movs	r3, #0
 800461c:	e005      	b.n	800462a <Max30102_Reset+0x3c>
	} while (tmp & (1 << 6));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <Max30102_Reset+0x1c>

	return MAX30102_OK;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode) {
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 800463c:	f107 030f 	add.w	r3, r7, #15
 8004640:	4619      	mov	r1, r3
 8004642:	2009      	movs	r0, #9
 8004644:	f7ff fe92 	bl	800436c <Max30102_ReadReg>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 800464e:	2300      	movs	r3, #0
 8004650:	e01a      	b.n	8004688 <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	f023 0307 	bic.w	r3, r3, #7
 8004658:	b2db      	uxtb	r3, r3
 800465a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 800465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	b25a      	sxtb	r2, r3
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	b25b      	sxtb	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b25b      	sxtb	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	4619      	mov	r1, r3
 8004676:	2009      	movs	r0, #9
 8004678:	f7ff fe56 	bl	8004328 <Max30102_WriteReg>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <Max30102_SetMode+0x56>

	return MAX30102_OK;
 8004686:	2301      	movs	r3, #1
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800469a:	f107 030f 	add.w	r3, r7, #15
 800469e:	4619      	mov	r1, r3
 80046a0:	200a      	movs	r0, #10
 80046a2:	f7ff fe63 	bl	800436c <Max30102_ReadReg>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e01b      	b.n	80046e8 <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	f023 0303 	bic.w	r3, r3, #3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	015b      	lsls	r3, r3, #5
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046c4:	b25a      	sxtb	r2, r3
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b25b      	sxtb	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	4619      	mov	r1, r3
 80046d6:	200a      	movs	r0, #10
 80046d8:	f7ff fe26 	bl	8004328 <Max30102_WriteReg>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 80046e6:	2301      	movs	r3, #1
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80046fa:	f107 030f 	add.w	r3, r7, #15
 80046fe:	4619      	mov	r1, r3
 8004700:	200a      	movs	r0, #10
 8004702:	f7ff fe33 	bl	800436c <Max30102_ReadReg>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d001      	beq.n	8004710 <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 800470c:	2300      	movs	r3, #0
 800470e:	e01b      	b.n	8004748 <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	b2db      	uxtb	r3, r3
 8004718:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	b25b      	sxtb	r3, r3
 8004720:	f003 031c 	and.w	r3, r3, #28
 8004724:	b25a      	sxtb	r2, r3
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	b25b      	sxtb	r3, r3
 800472a:	4313      	orrs	r3, r2
 800472c:	b25b      	sxtb	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	4619      	mov	r1, r3
 8004736:	200a      	movs	r0, #10
 8004738:	f7ff fdf6 	bl	8004328 <Max30102_WriteReg>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d001      	beq.n	8004746 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 800475a:	f107 030f 	add.w	r3, r7, #15
 800475e:	4619      	mov	r1, r3
 8004760:	200a      	movs	r0, #10
 8004762:	f7ff fe03 	bl	800436c <Max30102_ReadReg>
 8004766:	4603      	mov	r3, r0
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 800476c:	2300      	movs	r3, #0
 800476e:	e01a      	b.n	80047a6 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	f023 0303 	bic.w	r3, r3, #3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	b25a      	sxtb	r2, r3
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	b25b      	sxtb	r3, r3
 8004788:	4313      	orrs	r3, r2
 800478a:	b25b      	sxtb	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	4619      	mov	r1, r3
 8004794:	200a      	movs	r0, #10
 8004796:	f7ff fdc7 	bl	8004328 <Max30102_WriteReg>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d001      	beq.n	80047a4 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 80047a4:	2301      	movs	r3, #1
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <Max30102_Led1PulseAmplitude>:

//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value) {
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	4619      	mov	r1, r3
 80047bc:	200c      	movs	r0, #12
 80047be:	f7ff fdb3 	bl	8004328 <Max30102_WriteReg>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value) {
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	4619      	mov	r1, r3
 80047e4:	200d      	movs	r0, #13
 80047e6:	f7ff fd9f 	bl	8004328 <Max30102_WriteReg>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <Max30102_GetHeartRate>:
//
MAX30102_STATUS Max30102_IsFingerOnSensor(void) {
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void) {
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	return HeartRate;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <Max30102_GetHeartRate+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20001980 	.word	0x20001980

08004818 <Max30102_GetSpO2Value>:

int32_t Max30102_GetSpO2Value(void) {
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
	return Sp02Value;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <Max30102_GetSpO2Value+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20002c50 	.word	0x20002c50

08004830 <Max30102_Task>:

void Max30102_Task(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af04      	add	r7, sp, #16
	switch (StateMachine) {
 8004836:	4b4d      	ldr	r3, [pc, #308]	; (800496c <Max30102_Task+0x13c>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b03      	cmp	r3, #3
 800483c:	f200 8092 	bhi.w	8004964 <Max30102_Task+0x134>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <Max30102_Task+0x18>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	08004891 	.word	0x08004891
 8004850:	080048c1 	.word	0x080048c1
 8004854:	0800492d 	.word	0x0800492d
	case MAX30102_STATE_BEGIN:
		HeartRate = 0;
 8004858:	4b45      	ldr	r3, [pc, #276]	; (8004970 <Max30102_Task+0x140>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
		Sp02Value = 0;
 800485e:	4b45      	ldr	r3, [pc, #276]	; (8004974 <Max30102_Task+0x144>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
		if (IsFingerOnScreen) {
 8004864:	4b44      	ldr	r3, [pc, #272]	; (8004978 <Max30102_Task+0x148>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d075      	beq.n	800495a <Max30102_Task+0x12a>
			CollectedSamples = 0;
 800486e:	4b43      	ldr	r3, [pc, #268]	; (800497c <Max30102_Task+0x14c>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
			BufferTail = BufferHead;
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <Max30102_Task+0x150>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <Max30102_Task+0x154>)
 800487a:	6013      	str	r3, [r2, #0]
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 800487c:	2024      	movs	r0, #36	; 0x24
 800487e:	f7ff ff96 	bl	80047ae <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8004882:	2024      	movs	r0, #36	; 0x24
 8004884:	f7ff ffa7 	bl	80047d6 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_CALIBRATE;
 8004888:	4b38      	ldr	r3, [pc, #224]	; (800496c <Max30102_Task+0x13c>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800488e:	e064      	b.n	800495a <Max30102_Task+0x12a>

	case MAX30102_STATE_CALIBRATE:
		if (IsFingerOnScreen) {
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <Max30102_Task+0x148>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <Max30102_Task+0x7c>
			if (CollectedSamples
					> (MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND)) {
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <Max30102_Task+0x14c>)
 800489c:	681b      	ldr	r3, [r3, #0]
			if (CollectedSamples
 800489e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048a2:	d95c      	bls.n	800495e <Max30102_Task+0x12e>
				StateMachine = MAX30102_STATE_CALCULATE_HR;
 80048a4:	4b31      	ldr	r3, [pc, #196]	; (800496c <Max30102_Task+0x13c>)
 80048a6:	2202      	movs	r2, #2
 80048a8:	701a      	strb	r2, [r3, #0]
		} else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 80048aa:	e058      	b.n	800495e <Max30102_Task+0x12e>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7ff ff7e 	bl	80047ae <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f7ff ff8f 	bl	80047d6 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 80048b8:	4b2c      	ldr	r3, [pc, #176]	; (800496c <Max30102_Task+0x13c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
		break;
 80048be:	e04e      	b.n	800495e <Max30102_Task+0x12e>

	case MAX30102_STATE_CALCULATE_HR:
		if (IsFingerOnScreen) {
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <Max30102_Task+0x148>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d026      	beq.n	8004918 <Max30102_Task+0xe8>
			maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer,
 80048ca:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <Max30102_Task+0x154>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <Max30102_Task+0x158>)
 80048d2:	9203      	str	r2, [sp, #12]
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <Max30102_Task+0x140>)
 80048d6:	9202      	str	r2, [sp, #8]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <Max30102_Task+0x15c>)
 80048da:	9201      	str	r2, [sp, #4]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <Max30102_Task+0x144>)
 80048de:	9200      	str	r2, [sp, #0]
 80048e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048e4:	492a      	ldr	r1, [pc, #168]	; (8004990 <Max30102_Task+0x160>)
 80048e6:	482b      	ldr	r0, [pc, #172]	; (8004994 <Max30102_Task+0x164>)
 80048e8:	f000 f8ee 	bl	8004ac8 <maxim_heart_rate_and_oxygen_saturation>
			MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND, BufferTail,
					&Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
			BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND)
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <Max30102_Task+0x154>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f103 0264 	add.w	r2, r3, #100	; 0x64
					% MAX30102_BUFFER_LENGTH;
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <Max30102_Task+0x168>)
 80048f6:	fba3 1302 	umull	r1, r3, r3, r2
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
			BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND)
 8004906:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <Max30102_Task+0x154>)
 8004908:	6013      	str	r3, [r2, #0]
			CollectedSamples = 0;
 800490a:	4b1c      	ldr	r3, [pc, #112]	; (800497c <Max30102_Task+0x14c>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
			StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <Max30102_Task+0x13c>)
 8004912:	2203      	movs	r2, #3
 8004914:	701a      	strb	r2, [r3, #0]
		else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 8004916:	e025      	b.n	8004964 <Max30102_Task+0x134>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8004918:	2000      	movs	r0, #0
 800491a:	f7ff ff48 	bl	80047ae <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 800491e:	2001      	movs	r0, #1
 8004920:	f7ff ff59 	bl	80047d6 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <Max30102_Task+0x13c>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
		break;
 800492a:	e01b      	b.n	8004964 <Max30102_Task+0x134>

	case MAX30102_STATE_COLLECT_NEXT_PORTION:
		if (IsFingerOnScreen) {
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <Max30102_Task+0x148>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <Max30102_Task+0x116>
			if (CollectedSamples > MAX30102_SAMPLES_PER_SECOND) {
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <Max30102_Task+0x14c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d911      	bls.n	8004962 <Max30102_Task+0x132>
				StateMachine = MAX30102_STATE_CALCULATE_HR;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <Max30102_Task+0x13c>)
 8004940:	2202      	movs	r2, #2
 8004942:	701a      	strb	r2, [r3, #0]
		} else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 8004944:	e00d      	b.n	8004962 <Max30102_Task+0x132>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8004946:	2000      	movs	r0, #0
 8004948:	f7ff ff31 	bl	80047ae <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 800494c:	2001      	movs	r0, #1
 800494e:	f7ff ff42 	bl	80047d6 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <Max30102_Task+0x13c>)
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
		break;
 8004958:	e003      	b.n	8004962 <Max30102_Task+0x132>
		break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <Max30102_Task+0x134>
		break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <Max30102_Task+0x134>
		break;
 8004962:	bf00      	nop
	}
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20001978 	.word	0x20001978
 8004970:	20001980 	.word	0x20001980
 8004974:	20002c50 	.word	0x20002c50
 8004978:	20001979 	.word	0x20001979
 800497c:	20001970 	.word	0x20001970
 8004980:	2000197c 	.word	0x2000197c
 8004984:	200022e8 	.word	0x200022e8
 8004988:	20002c4c 	.word	0x20002c4c
 800498c:	200022e4 	.word	0x200022e4
 8004990:	200022ec 	.word	0x200022ec
 8004994:	20001984 	.word	0x20001984
 8004998:	1b4e81b5 	.word	0x1b4e81b5

0800499c <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 80049a4:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <Max30102_Init+0x124>)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6013      	str	r3, [r2, #0]
	if (MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 80049aa:	f7ff fe20 	bl	80045ee <Max30102_Reset>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e07e      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_ReadReg(0, &uch_dummy))
 80049b8:	f107 030f 	add.w	r3, r7, #15
 80049bc:	4619      	mov	r1, r3
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff fcd4 	bl	800436c <Max30102_ReadReg>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <Max30102_Init+0x32>
		return MAX30102_ERROR;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e073      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoWritePointer(0x00))
 80049ce:	2000      	movs	r0, #0
 80049d0:	f7ff fd4b 	bl	800446a <Max30102_FifoWritePointer>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <Max30102_Init+0x42>
		return MAX30102_ERROR;
 80049da:	2300      	movs	r3, #0
 80049dc:	e06b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 80049de:	2000      	movs	r0, #0
 80049e0:	f7ff fd5a 	bl	8004498 <Max30102_FifoOverflowCounter>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <Max30102_Init+0x52>
		return MAX30102_ERROR;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e063      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoReadPointer(0x00))
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7ff fd69 	bl	80044c6 <Max30102_FifoReadPointer>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <Max30102_Init+0x62>
		return MAX30102_ERROR;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e05b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 80049fe:	2000      	movs	r0, #0
 8004a00:	f7ff fd78 	bl	80044f4 <Max30102_FifoSampleAveraging>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <Max30102_Init+0x72>
		return MAX30102_ERROR;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e053      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7ff fd9d 	bl	800454e <Max30102_FifoRolloverEnable>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <Max30102_Init+0x82>
		return MAX30102_ERROR;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e04b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK
			!= Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8004a1e:	2011      	movs	r0, #17
 8004a20:	f7ff fda8 	bl	8004574 <Max30102_FifoAlmostFullValue>
 8004a24:	4603      	mov	r3, r0
	if (MAX30102_OK
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d001      	beq.n	8004a2e <Max30102_Init+0x92>
		return MAX30102_ERROR;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e043      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8004a2e:	2003      	movs	r0, #3
 8004a30:	f7ff fdff 	bl	8004632 <Max30102_SetMode>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e03b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f7ff fe26 	bl	8004690 <Max30102_SpO2AdcRange>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e033      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7ff fe4e 	bl	80046f0 <Max30102_SpO2SampleRate>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e02b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 8004a5e:	2003      	movs	r0, #3
 8004a60:	f7ff fe76 	bl	8004750 <Max30102_SpO2LedPulseWidth>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d001      	beq.n	8004a6e <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e023      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK
			!= Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7ff fe9d 	bl	80047ae <Max30102_Led1PulseAmplitude>
 8004a74:	4603      	mov	r3, r0
	if (MAX30102_OK
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e01b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f7ff fea9 	bl	80047d6 <Max30102_Led2PulseAmplitude>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e013      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7ff fccb 	bl	800442a <Max30102_SetIntAlmostFullEnabled>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <Max30102_Init+0x102>
		return MAX30102_ERROR;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e00b      	b.n	8004ab6 <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7ff fcd3 	bl	800444a <Max30102_SetIntFifoDataReadyEnabled>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d001      	beq.n	8004aae <Max30102_Init+0x112>
		return MAX30102_ERROR;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e003      	b.n	8004ab6 <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <Max30102_Init+0x128>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8004ab4:	2301      	movs	r3, #1
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20001974 	.word	0x20001974
 8004ac4:	20001978 	.word	0x20001978

08004ac8 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b0d3      	sub	sp, #332	; 0x14c
 8004acc:	af04      	add	r7, sp, #16
 8004ace:	f107 040c 	add.w	r4, r7, #12
 8004ad2:	6020      	str	r0, [r4, #0]
 8004ad4:	f107 0008 	add.w	r0, r7, #8
 8004ad8:	6001      	str	r1, [r0, #0]
 8004ada:	1d39      	adds	r1, r7, #4
 8004adc:	600a      	str	r2, [r1, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	1cbb      	adds	r3, r7, #2
 8004ae2:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8004ae4:	1cbb      	adds	r3, r7, #2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8004af2:	2300      	movs	r3, #0
 8004af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004af8:	e01f      	b.n	8004b3a <maxim_heart_rate_and_oxygen_saturation+0x72>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8004afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f107 020c 	add.w	r2, r7, #12
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	4413      	add	r3, r2
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004b0e:	4413      	add	r3, r2
 8004b10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004b14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4adc      	ldr	r2, [pc, #880]	; (8004e8c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8004b1c:	fba2 1203 	umull	r1, r2, r2, r3
 8004b20:	0992      	lsrs	r2, r2, #6
 8004b22:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004b26:	fb01 f202 	mul.w	r2, r1, r2
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8004b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b34:	3301      	adds	r3, #1
 8004b36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	dbd9      	blt.n	8004afa <maxim_heart_rate_and_oxygen_saturation+0x32>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8004b56:	1cbb      	adds	r3, r7, #2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b64:	e023      	b.n	8004bae <maxim_heart_rate_and_oxygen_saturation+0xe6>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8004b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	f107 020c 	add.w	r2, r7, #12
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	4413      	add	r3, r2
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4ac4      	ldr	r2, [pc, #784]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004b88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4abf      	ldr	r2, [pc, #764]	; (8004e8c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8004b90:	fba2 1203 	umull	r1, r2, r2, r3
 8004b94:	0992      	lsrs	r2, r2, #6
 8004b96:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004b9a:	fb01 f202 	mul.w	r2, r1, r2
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8004ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba8:	3301      	adds	r3, #1
 8004baa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	dbd5      	blt.n	8004b66 <maxim_heart_rate_and_oxygen_saturation+0x9e>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bc0:	e02c      	b.n	8004c1c <maxim_heart_rate_and_oxygen_saturation+0x154>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8004bc2:	4ab3      	ldr	r2, [pc, #716]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	49af      	ldr	r1, [pc, #700]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bd8:	441a      	add	r2, r3
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	3302      	adds	r3, #2
 8004be0:	49ab      	ldr	r1, [pc, #684]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004be2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004be6:	441a      	add	r2, r3
 8004be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bec:	3303      	adds	r3, #3
 8004bee:	49a8      	ldr	r1, [pc, #672]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8004bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da00      	bge.n	8004c04 <maxim_heart_rate_and_oxygen_saturation+0x13c>
 8004c02:	3303      	adds	r3, #3
 8004c04:	109b      	asrs	r3, r3, #2
 8004c06:	4619      	mov	r1, r3
 8004c08:	4aa1      	ldr	r2, [pc, #644]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8004c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c16:	3301      	adds	r3, #1
 8004c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c20:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8004c24:	dbcd      	blt.n	8004bc2 <maxim_heart_rate_and_oxygen_saturation+0xfa>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c2c:	e015      	b.n	8004c5a <maxim_heart_rate_and_oxygen_saturation+0x192>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8004c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a96      	ldr	r2, [pc, #600]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004c36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c3a:	4995      	ldr	r1, [pc, #596]	; (8004e90 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8004c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c44:	1ad2      	subs	r2, r2, r3
 8004c46:	4993      	ldr	r1, [pc, #588]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8004c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5e:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8004c62:	dde4      	ble.n	8004c2e <maxim_heart_rate_and_oxygen_saturation+0x166>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c6a:	e019      	b.n	8004ca0 <maxim_heart_rate_and_oxygen_saturation+0x1d8>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8004c6c:	4a89      	ldr	r2, [pc, #548]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	4985      	ldr	r1, [pc, #532]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004c7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c82:	4413      	add	r3, r2
 8004c84:	0fda      	lsrs	r2, r3, #31
 8004c86:	4413      	add	r3, r2
 8004c88:	105b      	asrs	r3, r3, #1
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4a81      	ldr	r2, [pc, #516]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8004ca8:	dbe0      	blt.n	8004c6c <maxim_heart_rate_and_oxygen_saturation+0x1a4>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004cb0:	e039      	b.n	8004d26 <maxim_heart_rate_and_oxygen_saturation+0x25e>
        s= 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8004cb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004cc0:	e018      	b.n	8004cf4 <maxim_heart_rate_and_oxygen_saturation+0x22c>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8004cc2:	4a74      	ldr	r2, [pc, #464]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ccc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004cd0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004cd4:	1a8a      	subs	r2, r1, r2
 8004cd6:	4970      	ldr	r1, [pc, #448]	; (8004e98 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8004cd8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8004cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004cf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	dddf      	ble.n	8004cc2 <maxim_heart_rate_and_oxygen_saturation+0x1fa>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 8004d02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d06:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8004d08:	fb82 1203 	smull	r1, r2, r2, r3
 8004d0c:	1252      	asrs	r2, r2, #9
 8004d0e:	17db      	asrs	r3, r3, #31
 8004d10:	1ad2      	subs	r2, r2, r3
 8004d12:	4960      	ldr	r1, [pc, #384]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8004d1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d20:	3301      	adds	r3, #1
 8004d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d2a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8004d2e:	ddc0      	ble.n	8004cb2 <maxim_heart_rate_and_oxygen_saturation+0x1ea>
    }

 
    n_th1=0; // threshold calculation
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d3c:	e011      	b.n	8004d62 <maxim_heart_rate_and_oxygen_saturation+0x29a>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8004d3e:	4a55      	ldr	r2, [pc, #340]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfb8      	it	lt
 8004d4c:	425b      	neglt	r3, r3
 8004d4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d52:	4413      	add	r3, r2
 8004d54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8004d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d66:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8004d6a:	dde8      	ble.n	8004d3e <maxim_heart_rate_and_oxygen_saturation+0x276>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8004d6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d70:	4a4b      	ldr	r2, [pc, #300]	; (8004ea0 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8004d72:	fb82 1203 	smull	r1, r2, r2, r3
 8004d76:	1192      	asrs	r2, r2, #6
 8004d78:	17db      	asrs	r3, r3, #31
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 8004d80:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8004d84:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d88:	2305      	movs	r3, #5
 8004d8a:	9302      	str	r3, [sp, #8]
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	f240 13ef 	movw	r3, #495	; 0x1ef
 8004d9a:	4a3e      	ldr	r2, [pc, #248]	; (8004e94 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8004d9c:	f000 fb76 	bl	800548c <maxim_find_peaks>

    n_peak_interval_sum =0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	dd40      	ble.n	8004e30 <maxim_heart_rate_and_oxygen_saturation+0x368>
        for (k=1; k<n_npks; k++)
 8004dae:	2301      	movs	r3, #1
 8004db0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004db4:	e017      	b.n	8004de6 <maxim_heart_rate_and_oxygen_saturation+0x31e>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8004db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dba:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc6:	1e59      	subs	r1, r3, #1
 8004dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8004ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de0:	3301      	adds	r3, #1
 8004de2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	dbe1      	blt.n	8004db6 <maxim_heart_rate_and_oxygen_saturation+0x2ee>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8004df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df6:	3b01      	subs	r3, #1
 8004df8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e00:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8004e04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e10:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ea4 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8004e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e1c:	ee17 2a90 	vmov	r2, s15
 8004e20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e24:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8004e26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e007      	b.n	8004e40 <maxim_heart_rate_and_oxygen_saturation+0x378>
    }
    else  {
        *pn_heart_rate = -999;
 8004e30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8004e36:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8004e38:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e46:	e013      	b.n	8004e70 <maxim_heart_rate_and_oxygen_saturation+0x3a8>
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 8004e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8004e60:	440b      	add	r3, r1
 8004e62:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 8004e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e74:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	dbe5      	blt.n	8004e48 <maxim_heart_rate_and_oxygen_saturation+0x380>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 8004e7c:	1cbb      	adds	r3, r7, #2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8004e84:	2300      	movs	r3, #0
 8004e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e8a:	e03e      	b.n	8004f0a <maxim_heart_rate_and_oxygen_saturation+0x442>
 8004e8c:	1b4e81b5 	.word	0x1b4e81b5
 8004e90:	20000854 	.word	0x20000854
 8004e94:	20000094 	.word	0x20000094
 8004e98:	08006154 	.word	0x08006154
 8004e9c:	725f9bed 	.word	0x725f9bed
 8004ea0:	21195767 	.word	0x21195767
 8004ea4:	45bb8000 	.word	0x45bb8000
 8004ea8:	fffffc19 	.word	0xfffffc19
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8004eac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	f107 020c 	add.w	r2, r7, #12
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4ab0      	ldr	r2, [pc, #704]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8004ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8004ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	f107 0208 	add.w	r2, r7, #8
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4aaa      	ldr	r2, [pc, #680]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8004edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8004ee4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4aa7      	ldr	r2, [pc, #668]	; (8005188 <maxim_heart_rate_and_oxygen_saturation+0x6c0>)
 8004eec:	fba2 1203 	umull	r1, r2, r2, r3
 8004ef0:	0992      	lsrs	r2, r2, #6
 8004ef2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004ef6:	fb01 f202 	mul.w	r2, r1, r2
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8004f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f04:	3301      	adds	r3, #1
 8004f06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	dbca      	blt.n	8004eac <maxim_heart_rate_and_oxygen_saturation+0x3e4>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8004f16:	2300      	movs	r3, #0
 8004f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f22:	e05a      	b.n	8004fda <maxim_heart_rate_and_oxygen_saturation+0x512>
        un_only_once =1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004f34:	4413      	add	r3, r2
 8004f36:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8004f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8004f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4a:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8004f4e:	da3f      	bge.n	8004fd0 <maxim_heart_rate_and_oxygen_saturation+0x508>
 8004f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	dd3b      	ble.n	8004fd0 <maxim_heart_rate_and_oxygen_saturation+0x508>
            for(i= m-5;i<m+5; i++)
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5c:	3b05      	subs	r3, #5
 8004f5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f62:	e025      	b.n	8004fb0 <maxim_heart_rate_and_oxygen_saturation+0x4e8>
                if (an_x[i]<n_c_min){
 8004f64:	4a86      	ldr	r2, [pc, #536]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8004f66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f72:	429a      	cmp	r2, r3
 8004f74:	dd17      	ble.n	8004fa6 <maxim_heart_rate_and_oxygen_saturation+0x4de>
                    if (un_only_once >0){
 8004f76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <maxim_heart_rate_and_oxygen_saturation+0x4bc>
                       un_only_once =0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 8004f84:	4a7e      	ldr	r2, [pc, #504]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8004f86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8004f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004fa2:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8004fa6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004faa:	3301      	adds	r3, #1
 8004fac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	ddd2      	ble.n	8004f64 <maxim_heart_rate_and_oxygen_saturation+0x49c>
                }
            if (un_only_once ==0)
 8004fbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <maxim_heart_rate_and_oxygen_saturation+0x508>
                n_exact_ir_valley_locs_count ++ ;
 8004fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8004fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fde:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	db9e      	blt.n	8004f24 <maxim_heart_rate_and_oxygen_saturation+0x45c>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8004fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	dc08      	bgt.n	8005000 <maxim_heart_rate_and_oxygen_saturation+0x538>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8004fee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004ff2:	4a66      	ldr	r2, [pc, #408]	; (800518c <maxim_heart_rate_and_oxygen_saturation+0x6c4>)
 8004ff4:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8004ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
       return;
 8004ffe:	e239      	b.n	8005474 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8005000:	2300      	movs	r3, #0
 8005002:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005006:	e04c      	b.n	80050a2 <maxim_heart_rate_and_oxygen_saturation+0x5da>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8005008:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 800500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005016:	3301      	adds	r3, #1
 8005018:	4959      	ldr	r1, [pc, #356]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 800501a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800501e:	441a      	add	r2, r3
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	3302      	adds	r3, #2
 8005026:	4956      	ldr	r1, [pc, #344]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8005028:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800502c:	441a      	add	r2, r3
 800502e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005032:	3303      	adds	r3, #3
 8005034:	4952      	ldr	r1, [pc, #328]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8005036:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800503a:	4413      	add	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	da00      	bge.n	8005042 <maxim_heart_rate_and_oxygen_saturation+0x57a>
 8005040:	3303      	adds	r3, #3
 8005042:	109b      	asrs	r3, r3, #2
 8005044:	4619      	mov	r1, r3
 8005046:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <maxim_heart_rate_and_oxygen_saturation+0x6b8>)
 8005048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8005050:	4a4c      	ldr	r2, [pc, #304]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8005052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800505a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505e:	3301      	adds	r3, #1
 8005060:	4948      	ldr	r1, [pc, #288]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8005062:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005066:	441a      	add	r2, r3
 8005068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506c:	3302      	adds	r3, #2
 800506e:	4945      	ldr	r1, [pc, #276]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8005070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005074:	441a      	add	r2, r3
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	3303      	adds	r3, #3
 800507c:	4941      	ldr	r1, [pc, #260]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 800507e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005082:	4413      	add	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	da00      	bge.n	800508a <maxim_heart_rate_and_oxygen_saturation+0x5c2>
 8005088:	3303      	adds	r3, #3
 800508a:	109b      	asrs	r3, r3, #2
 800508c:	4619      	mov	r1, r3
 800508e:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <maxim_heart_rate_and_oxygen_saturation+0x6bc>)
 8005090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005094:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8005098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509c:	3301      	adds	r3, #1
 800509e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a6:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80050aa:	dbad      	blt.n	8005008 <maxim_heart_rate_and_oxygen_saturation+0x540>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050be:	e00b      	b.n	80050d8 <maxim_heart_rate_and_oxygen_saturation+0x610>
 80050c0:	f107 0310 	add.w	r3, r7, #16
 80050c4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80050c8:	2100      	movs	r1, #0
 80050ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80050ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d2:	3301      	adds	r3, #1
 80050d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	2b04      	cmp	r3, #4
 80050de:	ddef      	ble.n	80050c0 <maxim_heart_rate_and_oxygen_saturation+0x5f8>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80050e6:	e018      	b.n	800511a <maxim_heart_rate_and_oxygen_saturation+0x652>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 80050e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80050f2:	4413      	add	r3, r2
 80050f4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80050f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050fc:	dd08      	ble.n	8005110 <maxim_heart_rate_and_oxygen_saturation+0x648>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 80050fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005102:	4a22      	ldr	r2, [pc, #136]	; (800518c <maxim_heart_rate_and_oxygen_saturation+0x6c4>)
 8005104:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8005106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
            return;
 800510e:	e1b1      	b.n	8005474 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8005110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800511a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800511e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005122:	429a      	cmp	r2, r3
 8005124:	dbe0      	blt.n	80050e8 <maxim_heart_rate_and_oxygen_saturation+0x620>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800512c:	e14b      	b.n	80053c6 <maxim_heart_rate_and_oxygen_saturation+0x8fe>
        n_y_dc_max= -16777216 ; 
 800512e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8005132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 8005136:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800513a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005142:	3301      	adds	r3, #1
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800514a:	4413      	add	r3, r2
 800514c:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8005150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800515a:	440b      	add	r3, r1
 800515c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b0a      	cmp	r3, #10
 8005164:	f340 812a 	ble.w	80053bc <maxim_heart_rate_and_oxygen_saturation+0x8f4>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8005168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005172:	4413      	add	r3, r2
 8005174:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005178:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800517c:	e035      	b.n	80051ea <maxim_heart_rate_and_oxygen_saturation+0x722>
 800517e:	bf00      	nop
 8005180:	20000854 	.word	0x20000854
 8005184:	20001024 	.word	0x20001024
 8005188:	1b4e81b5 	.word	0x1b4e81b5
 800518c:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 8005190:	4aba      	ldr	r2, [pc, #744]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 8005192:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800519e:	429a      	cmp	r2, r3
 80051a0:	da0a      	bge.n	80051b8 <maxim_heart_rate_and_oxygen_saturation+0x6f0>
 80051a2:	4ab6      	ldr	r2, [pc, #728]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80051a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80051b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 80051b8:	4ab1      	ldr	r2, [pc, #708]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80051ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80051c6:	429a      	cmp	r2, r3
 80051c8:	da0a      	bge.n	80051e0 <maxim_heart_rate_and_oxygen_saturation+0x718>
 80051ca:	4aad      	ldr	r2, [pc, #692]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 80051cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80051e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051e4:	3301      	adds	r3, #1
 80051e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ee:	3301      	adds	r3, #1
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80051f6:	4413      	add	r3, r2
 80051f8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80051fc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005200:	429a      	cmp	r2, r3
 8005202:	dbc5      	blt.n	8005190 <maxim_heart_rate_and_oxygen_saturation+0x6c8>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8005204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005208:	3301      	adds	r3, #1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005210:	4413      	add	r3, r2
 8005212:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005216:	4a9a      	ldr	r2, [pc, #616]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 8005218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800521c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8005226:	440b      	add	r3, r1
 8005228:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800522c:	4994      	ldr	r1, [pc, #592]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 800522e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800523e:	440b      	add	r3, r1
 8005240:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005244:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8005248:	1acb      	subs	r3, r1, r3
 800524a:	fb03 f302 	mul.w	r3, r3, r2
 800524e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800525c:	4413      	add	r3, r2
 800525e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005262:	4a87      	ldr	r2, [pc, #540]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 8005264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526c:	3301      	adds	r3, #1
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8005274:	440b      	add	r3, r1
 8005276:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800527a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005284:	4403      	add	r3, r0
 8005286:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800528a:	1acb      	subs	r3, r1, r3
 800528c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005290:	fb91 f3f3 	sdiv	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 800529a:	4a79      	ldr	r2, [pc, #484]	; (8005480 <maxim_heart_rate_and_oxygen_saturation+0x9b8>)
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	3301      	adds	r3, #1
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80052ba:	4413      	add	r3, r2
 80052bc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80052c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80052d0:	440b      	add	r3, r1
 80052d2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80052d6:	4969      	ldr	r1, [pc, #420]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 80052d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80052e8:	440b      	add	r3, r1
 80052ea:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80052ee:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80052f2:	1acb      	subs	r3, r1, r3
 80052f4:	fb03 f302 	mul.w	r3, r3, r2
 80052f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 80052fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005306:	4413      	add	r3, r2
 8005308:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800530c:	4a5b      	ldr	r2, [pc, #364]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 800530e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005316:	3301      	adds	r3, #1
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800531e:	440b      	add	r3, r1
 8005320:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8005324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800532e:	4403      	add	r3, r0
 8005330:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8005334:	1acb      	subs	r3, r1, r3
 8005336:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800533a:	fb91 f3f3 	sdiv	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8005344:	4a4d      	ldr	r2, [pc, #308]	; (800547c <maxim_heart_rate_and_oxygen_saturation+0x9b4>)
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800534e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8005358:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800535c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	11db      	asrs	r3, r3, #7
 8005366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 800536a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800536e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	11db      	asrs	r3, r3, #7
 8005378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005380:	2b00      	cmp	r3, #0
 8005382:	dd1b      	ble.n	80053bc <maxim_heart_rate_and_oxygen_saturation+0x8f4>
 8005384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005388:	2b04      	cmp	r3, #4
 800538a:	dc17      	bgt.n	80053bc <maxim_heart_rate_and_oxygen_saturation+0x8f4>
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <maxim_heart_rate_and_oxygen_saturation+0x8f4>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005398:	2264      	movs	r2, #100	; 0x64
 800539a:	fb02 f203 	mul.w	r2, r2, r3
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a2:	fb92 f1f3 	sdiv	r1, r2, r3
 80053a6:	f107 0310 	add.w	r3, r7, #16
 80053aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80053ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 80053b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053b6:	3301      	adds	r3, #1
 80053b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80053bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80053d0:	429a      	cmp	r2, r3
 80053d2:	f6ff aeac 	blt.w	800512e <maxim_heart_rate_and_oxygen_saturation+0x666>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80053d6:	f107 0310 	add.w	r3, r7, #16
 80053da:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f949 	bl	8005676 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 80053e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053e8:	0fda      	lsrs	r2, r3, #31
 80053ea:	4413      	add	r3, r2
 80053ec:	105b      	asrs	r3, r3, #1
 80053ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	dd13      	ble.n	8005422 <maxim_heart_rate_and_oxygen_saturation+0x95a>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	1e5a      	subs	r2, r3, #1
 8005400:	f107 0310 	add.w	r3, r7, #16
 8005404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005408:	f107 0310 	add.w	r3, r7, #16
 800540c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8005410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005414:	4413      	add	r3, r2
 8005416:	0fda      	lsrs	r2, r3, #31
 8005418:	4413      	add	r3, r2
 800541a:	105b      	asrs	r3, r3, #1
 800541c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005420:	e007      	b.n	8005432 <maxim_heart_rate_and_oxygen_saturation+0x96a>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8005422:	f107 0310 	add.w	r3, r7, #16
 8005426:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8005432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005436:	2b02      	cmp	r3, #2
 8005438:	dd14      	ble.n	8005464 <maxim_heart_rate_and_oxygen_saturation+0x99c>
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2bb7      	cmp	r3, #183	; 0xb7
 8005440:	dc10      	bgt.n	8005464 <maxim_heart_rate_and_oxygen_saturation+0x99c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8005442:	4a10      	ldr	r2, [pc, #64]	; (8005484 <maxim_heart_rate_and_oxygen_saturation+0x9bc>)
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	4413      	add	r3, r2
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 8005450:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005454:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005458:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 800545a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e007      	b.n	8005474 <maxim_heart_rate_and_oxygen_saturation+0x9ac>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8005464:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005468:	4a07      	ldr	r2, [pc, #28]	; (8005488 <maxim_heart_rate_and_oxygen_saturation+0x9c0>)
 800546a:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 800546c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
    }
}
 8005474:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005478:	46bd      	mov	sp, r7
 800547a:	bd90      	pop	{r4, r7, pc}
 800547c:	20000854 	.word	0x20000854
 8005480:	20001024 	.word	0x20001024
 8005484:	08006194 	.word	0x08006194
 8005488:	fffffc19 	.word	0xfffffc19

0800548c <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f812 	bl	80054ce <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f880 	bl	80055b6 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bfa8      	it	ge
 80054c0:	461a      	movge	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 80054ce:	b480      	push	{r7}
 80054d0:	b087      	sub	sp, #28
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 80054dc:	2301      	movs	r3, #1
 80054de:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 80054e6:	e05a      	b.n	800559e <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	da4f      	bge.n	8005598 <maxim_peaks_above_min_height+0xca>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005508:	3b01      	subs	r3, #1
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	440b      	add	r3, r1
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	dd40      	ble.n	8005598 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8005516:	2301      	movs	r3, #1
 8005518:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800551a:	e002      	b.n	8005522 <maxim_peaks_above_min_height+0x54>
                n_width++;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3301      	adds	r3, #1
 8005520:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	dd0d      	ble.n	800554a <maxim_peaks_above_min_height+0x7c>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	440b      	add	r3, r1
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	440b      	add	r3, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d0e8      	beq.n	800551c <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	440b      	add	r3, r1
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	440b      	add	r3, r1
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	dd13      	ble.n	800558e <maxim_peaks_above_min_height+0xc0>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b0e      	cmp	r3, #14
 800556c:	dc0f      	bgt.n	800558e <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6011      	str	r1, [r2, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3301      	adds	r3, #1
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4413      	add	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e003      	b.n	8005596 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8005596:	e002      	b.n	800559e <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	db9f      	blt.n	80054e8 <maxim_peaks_above_min_height+0x1a>
    }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f895 	bl	80056fc <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	e03e      	b.n	8005658 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3301      	adds	r3, #1
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e02c      	b.n	800564a <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005600:	d005      	beq.n	800560e <maxim_remove_close_peaks+0x58>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	440b      	add	r3, r1
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	e001      	b.n	8005612 <maxim_remove_close_peaks+0x5c>
 800560e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	dc04      	bgt.n	8005628 <maxim_remove_close_peaks+0x72>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	425b      	negs	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	da0d      	bge.n	8005644 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	441a      	add	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	1c58      	adds	r0, r3, #1
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	6008      	str	r0, [r1, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	440b      	add	r3, r1
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	3301      	adds	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	429a      	cmp	r2, r3
 8005650:	dbce      	blt.n	80055f0 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	429a      	cmp	r2, r3
 8005660:	dbbb      	blt.n	80055da <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f804 	bl	8005676 <maxim_sort_ascend>
}
 800566e:	bf00      	nop
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e02f      	b.n	80056e6 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e00f      	b.n	80056b8 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800569e:	3b01      	subs	r3, #1
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	440b      	add	r3, r1
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	dd0a      	ble.n	80056d4 <maxim_sort_ascend+0x5e>
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056c4:	3b01      	subs	r3, #1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	dbe1      	blt.n	8005698 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3301      	adds	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	dbcb      	blt.n	8005686 <maxim_sort_ascend+0x10>
    }
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8005708:	2301      	movs	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e037      	b.n	800577e <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	4413      	add	r3, r2
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e00f      	b.n	8005740 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005726:	3b01      	subs	r3, #1
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	441a      	add	r2, r3
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	440b      	add	r3, r1
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3b01      	subs	r3, #1
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	dd12      	ble.n	800576c <maxim_sort_indices_descend+0x70>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005756:	3b01      	subs	r3, #1
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	440b      	add	r3, r1
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	440b      	add	r3, r1
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	dcd9      	bgt.n	8005720 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	4413      	add	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	dbc3      	blt.n	800570e <maxim_sort_indices_descend+0x12>
    }
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	3724      	adds	r7, #36	; 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <sx1508b_setup_communication>:
 *
 * @param  setup   user defined setup struct (ptr)
 * @retval       	interface status (MANDATORY: return 0 -> no Error) TODO
 *
 */
void sx1508b_setup_communication(sx1508b_t *configs) {
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

	/* Save pointer to function globally */
	sx1508b_comm.read = configs->comm.read;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <sx1508b_setup_communication+0x24>)
 80057a2:	6053      	str	r3, [r2, #4]
	sx1508b_comm.write = configs->comm.write;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <sx1508b_setup_communication+0x24>)
 80057aa:	6013      	str	r3, [r2, #0]

	// TODO: Implement return if successful
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	20002c54 	.word	0x20002c54

080057bc <sx1508b_read_pin>:
 * reads the value of the specified pin and writes it into the given data buffer
 *
 * @param pinNumber		number of the pin, whose value is read out
 * @param data			buffer where the value of the pin is stored into
 */
void sx1508b_read_pin(uint8_t pinNumber, uint8_t *data) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]

	// update the register value
	uint8_t currentSettings = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	73fb      	strb	r3, [r7, #15]
	sx1508b_comm.read(SX1508B_REG_DATA, &currentSettings, 1);
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <sx1508b_read_pin+0x44>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f107 010f 	add.w	r1, r7, #15
 80057d4:	2201      	movs	r2, #1
 80057d6:	2008      	movs	r0, #8
 80057d8:	4798      	blx	r3
	//TODO: doublecheck if this pointer access is correct
	*data = (currentSettings & (0b00000000 ^ (0b1 << pinNumber))) >> pinNumber;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	4619      	mov	r1, r3
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2201      	movs	r2, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	ea01 0203 	and.w	r2, r1, r3
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	fa42 f303 	asr.w	r3, r2, r3
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	701a      	strb	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20002c54 	.word	0x20002c54

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	; (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000010 	.word	0x20000010

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	; (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	; (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	; (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	; (8005854 <__libc_init_array+0x44>)
 8005824:	f000 fc4e 	bl	80060c4 <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	08006288 	.word	0x08006288
 800584c:	08006288 	.word	0x08006288
 8005850:	08006288 	.word	0x08006288
 8005854:	0800628c 	.word	0x0800628c

08005858 <memcpy>:
 8005858:	440a      	add	r2, r1
 800585a:	4291      	cmp	r1, r2
 800585c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005860:	d100      	bne.n	8005864 <memcpy+0xc>
 8005862:	4770      	bx	lr
 8005864:	b510      	push	{r4, lr}
 8005866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800586a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586e:	4291      	cmp	r1, r2
 8005870:	d1f9      	bne.n	8005866 <memcpy+0xe>
 8005872:	bd10      	pop	{r4, pc}

08005874 <memset>:
 8005874:	4402      	add	r2, r0
 8005876:	4603      	mov	r3, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <siprintf>:
 8005884:	b40e      	push	{r1, r2, r3}
 8005886:	b500      	push	{lr}
 8005888:	b09c      	sub	sp, #112	; 0x70
 800588a:	ab1d      	add	r3, sp, #116	; 0x74
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	9006      	str	r0, [sp, #24]
 8005890:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005894:	4809      	ldr	r0, [pc, #36]	; (80058bc <siprintf+0x38>)
 8005896:	9107      	str	r1, [sp, #28]
 8005898:	9104      	str	r1, [sp, #16]
 800589a:	4909      	ldr	r1, [pc, #36]	; (80058c0 <siprintf+0x3c>)
 800589c:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a0:	9105      	str	r1, [sp, #20]
 80058a2:	6800      	ldr	r0, [r0, #0]
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	a902      	add	r1, sp, #8
 80058a8:	f000 f868 	bl	800597c <_svfiprintf_r>
 80058ac:	9b02      	ldr	r3, [sp, #8]
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	b01c      	add	sp, #112	; 0x70
 80058b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b8:	b003      	add	sp, #12
 80058ba:	4770      	bx	lr
 80058bc:	20000010 	.word	0x20000010
 80058c0:	ffff0208 	.word	0xffff0208

080058c4 <__ssputs_r>:
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	688e      	ldr	r6, [r1, #8]
 80058ca:	429e      	cmp	r6, r3
 80058cc:	4682      	mov	sl, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	4690      	mov	r8, r2
 80058d2:	461f      	mov	r7, r3
 80058d4:	d838      	bhi.n	8005948 <__ssputs_r+0x84>
 80058d6:	898a      	ldrh	r2, [r1, #12]
 80058d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058dc:	d032      	beq.n	8005944 <__ssputs_r+0x80>
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	6909      	ldr	r1, [r1, #16]
 80058e2:	eba5 0901 	sub.w	r9, r5, r1
 80058e6:	6965      	ldr	r5, [r4, #20]
 80058e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f0:	3301      	adds	r3, #1
 80058f2:	444b      	add	r3, r9
 80058f4:	106d      	asrs	r5, r5, #1
 80058f6:	429d      	cmp	r5, r3
 80058f8:	bf38      	it	cc
 80058fa:	461d      	movcc	r5, r3
 80058fc:	0553      	lsls	r3, r2, #21
 80058fe:	d531      	bpl.n	8005964 <__ssputs_r+0xa0>
 8005900:	4629      	mov	r1, r5
 8005902:	f000 fb39 	bl	8005f78 <_malloc_r>
 8005906:	4606      	mov	r6, r0
 8005908:	b950      	cbnz	r0, 8005920 <__ssputs_r+0x5c>
 800590a:	230c      	movs	r3, #12
 800590c:	f8ca 3000 	str.w	r3, [sl]
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	6921      	ldr	r1, [r4, #16]
 8005922:	464a      	mov	r2, r9
 8005924:	f7ff ff98 	bl	8005858 <memcpy>
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	6126      	str	r6, [r4, #16]
 8005936:	6165      	str	r5, [r4, #20]
 8005938:	444e      	add	r6, r9
 800593a:	eba5 0509 	sub.w	r5, r5, r9
 800593e:	6026      	str	r6, [r4, #0]
 8005940:	60a5      	str	r5, [r4, #8]
 8005942:	463e      	mov	r6, r7
 8005944:	42be      	cmp	r6, r7
 8005946:	d900      	bls.n	800594a <__ssputs_r+0x86>
 8005948:	463e      	mov	r6, r7
 800594a:	4632      	mov	r2, r6
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	4641      	mov	r1, r8
 8005950:	f000 faa8 	bl	8005ea4 <memmove>
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	1b9b      	subs	r3, r3, r6
 800595a:	4432      	add	r2, r6
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	6022      	str	r2, [r4, #0]
 8005960:	2000      	movs	r0, #0
 8005962:	e7db      	b.n	800591c <__ssputs_r+0x58>
 8005964:	462a      	mov	r2, r5
 8005966:	f000 fb61 	bl	800602c <_realloc_r>
 800596a:	4606      	mov	r6, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	d1e1      	bne.n	8005934 <__ssputs_r+0x70>
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	4650      	mov	r0, sl
 8005974:	f000 fab0 	bl	8005ed8 <_free_r>
 8005978:	e7c7      	b.n	800590a <__ssputs_r+0x46>
	...

0800597c <_svfiprintf_r>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	4698      	mov	r8, r3
 8005982:	898b      	ldrh	r3, [r1, #12]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	b09d      	sub	sp, #116	; 0x74
 8005988:	4607      	mov	r7, r0
 800598a:	460d      	mov	r5, r1
 800598c:	4614      	mov	r4, r2
 800598e:	d50e      	bpl.n	80059ae <_svfiprintf_r+0x32>
 8005990:	690b      	ldr	r3, [r1, #16]
 8005992:	b963      	cbnz	r3, 80059ae <_svfiprintf_r+0x32>
 8005994:	2140      	movs	r1, #64	; 0x40
 8005996:	f000 faef 	bl	8005f78 <_malloc_r>
 800599a:	6028      	str	r0, [r5, #0]
 800599c:	6128      	str	r0, [r5, #16]
 800599e:	b920      	cbnz	r0, 80059aa <_svfiprintf_r+0x2e>
 80059a0:	230c      	movs	r3, #12
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a8:	e0d1      	b.n	8005b4e <_svfiprintf_r+0x1d2>
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	616b      	str	r3, [r5, #20]
 80059ae:	2300      	movs	r3, #0
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	2320      	movs	r3, #32
 80059b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059bc:	2330      	movs	r3, #48	; 0x30
 80059be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b68 <_svfiprintf_r+0x1ec>
 80059c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c6:	f04f 0901 	mov.w	r9, #1
 80059ca:	4623      	mov	r3, r4
 80059cc:	469a      	mov	sl, r3
 80059ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d2:	b10a      	cbz	r2, 80059d8 <_svfiprintf_r+0x5c>
 80059d4:	2a25      	cmp	r2, #37	; 0x25
 80059d6:	d1f9      	bne.n	80059cc <_svfiprintf_r+0x50>
 80059d8:	ebba 0b04 	subs.w	fp, sl, r4
 80059dc:	d00b      	beq.n	80059f6 <_svfiprintf_r+0x7a>
 80059de:	465b      	mov	r3, fp
 80059e0:	4622      	mov	r2, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff ff6d 	bl	80058c4 <__ssputs_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	f000 80aa 	beq.w	8005b44 <_svfiprintf_r+0x1c8>
 80059f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f2:	445a      	add	r2, fp
 80059f4:	9209      	str	r2, [sp, #36]	; 0x24
 80059f6:	f89a 3000 	ldrb.w	r3, [sl]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80a2 	beq.w	8005b44 <_svfiprintf_r+0x1c8>
 8005a00:	2300      	movs	r3, #0
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0a:	f10a 0a01 	add.w	sl, sl, #1
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	9307      	str	r3, [sp, #28]
 8005a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a16:	931a      	str	r3, [sp, #104]	; 0x68
 8005a18:	4654      	mov	r4, sl
 8005a1a:	2205      	movs	r2, #5
 8005a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a20:	4851      	ldr	r0, [pc, #324]	; (8005b68 <_svfiprintf_r+0x1ec>)
 8005a22:	f7fa fbdd 	bl	80001e0 <memchr>
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	b9d8      	cbnz	r0, 8005a62 <_svfiprintf_r+0xe6>
 8005a2a:	06d0      	lsls	r0, r2, #27
 8005a2c:	bf44      	itt	mi
 8005a2e:	2320      	movmi	r3, #32
 8005a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a34:	0711      	lsls	r1, r2, #28
 8005a36:	bf44      	itt	mi
 8005a38:	232b      	movmi	r3, #43	; 0x2b
 8005a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a42:	2b2a      	cmp	r3, #42	; 0x2a
 8005a44:	d015      	beq.n	8005a72 <_svfiprintf_r+0xf6>
 8005a46:	9a07      	ldr	r2, [sp, #28]
 8005a48:	4654      	mov	r4, sl
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f04f 0c0a 	mov.w	ip, #10
 8005a50:	4621      	mov	r1, r4
 8005a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a56:	3b30      	subs	r3, #48	; 0x30
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d94e      	bls.n	8005afa <_svfiprintf_r+0x17e>
 8005a5c:	b1b0      	cbz	r0, 8005a8c <_svfiprintf_r+0x110>
 8005a5e:	9207      	str	r2, [sp, #28]
 8005a60:	e014      	b.n	8005a8c <_svfiprintf_r+0x110>
 8005a62:	eba0 0308 	sub.w	r3, r0, r8
 8005a66:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	46a2      	mov	sl, r4
 8005a70:	e7d2      	b.n	8005a18 <_svfiprintf_r+0x9c>
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	1d19      	adds	r1, r3, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	9103      	str	r1, [sp, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bfbb      	ittet	lt
 8005a7e:	425b      	neglt	r3, r3
 8005a80:	f042 0202 	orrlt.w	r2, r2, #2
 8005a84:	9307      	strge	r3, [sp, #28]
 8005a86:	9307      	strlt	r3, [sp, #28]
 8005a88:	bfb8      	it	lt
 8005a8a:	9204      	strlt	r2, [sp, #16]
 8005a8c:	7823      	ldrb	r3, [r4, #0]
 8005a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a90:	d10c      	bne.n	8005aac <_svfiprintf_r+0x130>
 8005a92:	7863      	ldrb	r3, [r4, #1]
 8005a94:	2b2a      	cmp	r3, #42	; 0x2a
 8005a96:	d135      	bne.n	8005b04 <_svfiprintf_r+0x188>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9203      	str	r2, [sp, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfb8      	it	lt
 8005aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005aa8:	3402      	adds	r4, #2
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b78 <_svfiprintf_r+0x1fc>
 8005ab0:	7821      	ldrb	r1, [r4, #0]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	f7fa fb93 	bl	80001e0 <memchr>
 8005aba:	b140      	cbz	r0, 8005ace <_svfiprintf_r+0x152>
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	eba0 000a 	sub.w	r0, r0, sl
 8005ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	4303      	orrs	r3, r0
 8005aca:	3401      	adds	r4, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	4826      	ldr	r0, [pc, #152]	; (8005b6c <_svfiprintf_r+0x1f0>)
 8005ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ad8:	2206      	movs	r2, #6
 8005ada:	f7fa fb81 	bl	80001e0 <memchr>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d038      	beq.n	8005b54 <_svfiprintf_r+0x1d8>
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <_svfiprintf_r+0x1f4>)
 8005ae4:	bb1b      	cbnz	r3, 8005b2e <_svfiprintf_r+0x1b2>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	3307      	adds	r3, #7
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	3308      	adds	r3, #8
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af4:	4433      	add	r3, r6
 8005af6:	9309      	str	r3, [sp, #36]	; 0x24
 8005af8:	e767      	b.n	80059ca <_svfiprintf_r+0x4e>
 8005afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005afe:	460c      	mov	r4, r1
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7a5      	b.n	8005a50 <_svfiprintf_r+0xd4>
 8005b04:	2300      	movs	r3, #0
 8005b06:	3401      	adds	r4, #1
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f04f 0c0a 	mov.w	ip, #10
 8005b10:	4620      	mov	r0, r4
 8005b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b16:	3a30      	subs	r2, #48	; 0x30
 8005b18:	2a09      	cmp	r2, #9
 8005b1a:	d903      	bls.n	8005b24 <_svfiprintf_r+0x1a8>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c5      	beq.n	8005aac <_svfiprintf_r+0x130>
 8005b20:	9105      	str	r1, [sp, #20]
 8005b22:	e7c3      	b.n	8005aac <_svfiprintf_r+0x130>
 8005b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b28:	4604      	mov	r4, r0
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f0      	b.n	8005b10 <_svfiprintf_r+0x194>
 8005b2e:	ab03      	add	r3, sp, #12
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	462a      	mov	r2, r5
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <_svfiprintf_r+0x1f8>)
 8005b36:	a904      	add	r1, sp, #16
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f3af 8000 	nop.w
 8005b3e:	1c42      	adds	r2, r0, #1
 8005b40:	4606      	mov	r6, r0
 8005b42:	d1d6      	bne.n	8005af2 <_svfiprintf_r+0x176>
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	065b      	lsls	r3, r3, #25
 8005b48:	f53f af2c 	bmi.w	80059a4 <_svfiprintf_r+0x28>
 8005b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b4e:	b01d      	add	sp, #116	; 0x74
 8005b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <_svfiprintf_r+0x1f8>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f000 f87a 	bl	8005c58 <_printf_i>
 8005b64:	e7eb      	b.n	8005b3e <_svfiprintf_r+0x1c2>
 8005b66:	bf00      	nop
 8005b68:	0800624c 	.word	0x0800624c
 8005b6c:	08006256 	.word	0x08006256
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058c5 	.word	0x080058c5
 8005b78:	08006252 	.word	0x08006252

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfb8      	it	lt
 8005b90:	4613      	movlt	r3, r2
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b98:	4607      	mov	r7, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc26      	bgt.n	8005c12 <_printf_common+0x96>
 8005bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc8:	1e13      	subs	r3, r2, #0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42b      	bmi.n	8005c2c <_printf_common+0xb0>
 8005bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d01e      	beq.n	8005c20 <_printf_common+0xa4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	68e5      	ldr	r5, [r4, #12]
 8005be6:	6832      	ldr	r2, [r6, #0]
 8005be8:	f003 0306 	and.w	r3, r3, #6
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	bf08      	it	eq
 8005bf0:	1aad      	subeq	r5, r5, r2
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6922      	ldr	r2, [r4, #16]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	2600      	movs	r6, #0
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xc8>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xa8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4649      	mov	r1, r9
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c0      	blx	r8
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xac>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c6      	b.n	8005bba <_printf_common+0x3e>
 8005c2c:	18e1      	adds	r1, r4, r3
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	2030      	movs	r0, #48	; 0x30
 8005c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c36:	4422      	add	r2, r4
 8005c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7c7      	b.n	8005bd4 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa4>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x8e>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	4691      	mov	r9, r2
 8005c60:	7e27      	ldrb	r7, [r4, #24]
 8005c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4680      	mov	r8, r0
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	; 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d8 	beq.w	8005e2a <_printf_i+0x1d2>
 8005c7a:	2f58      	cmp	r7, #88	; 0x58
 8005c7c:	f000 80a3 	beq.w	8005dc6 <_printf_i+0x16e>
 8005c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a001      	add	r0, pc, #4	; (adr r0, 8005c98 <_printf_i+0x40>)
 8005c94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e11 	.word	0x08005e11
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005df3 	.word	0x08005df3
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e33 	.word	0x08005e33
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dfb 	.word	0x08005dfb
 8005cf0:	680b      	ldr	r3, [r1, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	600a      	str	r2, [r1, #0]
 8005cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a3      	b.n	8005e4c <_printf_i+0x1f4>
 8005d04:	6825      	ldr	r5, [r4, #0]
 8005d06:	6808      	ldr	r0, [r1, #0]
 8005d08:	062e      	lsls	r6, r5, #24
 8005d0a:	f100 0304 	add.w	r3, r0, #4
 8005d0e:	d50a      	bpl.n	8005d26 <_printf_i+0xce>
 8005d10:	6805      	ldr	r5, [r0, #0]
 8005d12:	600b      	str	r3, [r1, #0]
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	da03      	bge.n	8005d20 <_printf_i+0xc8>
 8005d18:	232d      	movs	r3, #45	; 0x2d
 8005d1a:	426d      	negs	r5, r5
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d20:	485e      	ldr	r0, [pc, #376]	; (8005e9c <_printf_i+0x244>)
 8005d22:	230a      	movs	r3, #10
 8005d24:	e019      	b.n	8005d5a <_printf_i+0x102>
 8005d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d2a:	6805      	ldr	r5, [r0, #0]
 8005d2c:	600b      	str	r3, [r1, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	b22d      	sxthne	r5, r5
 8005d32:	e7ef      	b.n	8005d14 <_printf_i+0xbc>
 8005d34:	680b      	ldr	r3, [r1, #0]
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	1d18      	adds	r0, r3, #4
 8005d3a:	6008      	str	r0, [r1, #0]
 8005d3c:	0628      	lsls	r0, r5, #24
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0xec>
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0xf2>
 8005d44:	0669      	lsls	r1, r5, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0xe8>
 8005d48:	881d      	ldrh	r5, [r3, #0]
 8005d4a:	4854      	ldr	r0, [pc, #336]	; (8005e9c <_printf_i+0x244>)
 8005d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d4e:	bf0c      	ite	eq
 8005d50:	2308      	moveq	r3, #8
 8005d52:	230a      	movne	r3, #10
 8005d54:	2100      	movs	r1, #0
 8005d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5a:	6866      	ldr	r6, [r4, #4]
 8005d5c:	60a6      	str	r6, [r4, #8]
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	bfa2      	ittt	ge
 8005d62:	6821      	ldrge	r1, [r4, #0]
 8005d64:	f021 0104 	bicge.w	r1, r1, #4
 8005d68:	6021      	strge	r1, [r4, #0]
 8005d6a:	b90d      	cbnz	r5, 8005d70 <_printf_i+0x118>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d04d      	beq.n	8005e0c <_printf_i+0x1b4>
 8005d70:	4616      	mov	r6, r2
 8005d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d76:	fb03 5711 	mls	r7, r3, r1, r5
 8005d7a:	5dc7      	ldrb	r7, [r0, r7]
 8005d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d80:	462f      	mov	r7, r5
 8005d82:	42bb      	cmp	r3, r7
 8005d84:	460d      	mov	r5, r1
 8005d86:	d9f4      	bls.n	8005d72 <_printf_i+0x11a>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d10b      	bne.n	8005da4 <_printf_i+0x14c>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	d508      	bpl.n	8005da4 <_printf_i+0x14c>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4299      	cmp	r1, r3
 8005d98:	bfde      	ittt	le
 8005d9a:	2330      	movle	r3, #48	; 0x30
 8005d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005da0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005da4:	1b92      	subs	r2, r2, r6
 8005da6:	6122      	str	r2, [r4, #16]
 8005da8:	f8cd a000 	str.w	sl, [sp]
 8005dac:	464b      	mov	r3, r9
 8005dae:	aa03      	add	r2, sp, #12
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f7ff fee2 	bl	8005b7c <_printf_common>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d14c      	bne.n	8005e56 <_printf_i+0x1fe>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	b004      	add	sp, #16
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	4835      	ldr	r0, [pc, #212]	; (8005e9c <_printf_i+0x244>)
 8005dc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	680e      	ldr	r6, [r1, #0]
 8005dd0:	061f      	lsls	r7, r3, #24
 8005dd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dd6:	600e      	str	r6, [r1, #0]
 8005dd8:	d514      	bpl.n	8005e04 <_printf_i+0x1ac>
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	bf44      	itt	mi
 8005dde:	f043 0320 	orrmi.w	r3, r3, #32
 8005de2:	6023      	strmi	r3, [r4, #0]
 8005de4:	b91d      	cbnz	r5, 8005dee <_printf_i+0x196>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f023 0320 	bic.w	r3, r3, #32
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	2310      	movs	r3, #16
 8005df0:	e7b0      	b.n	8005d54 <_printf_i+0xfc>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f043 0320 	orr.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	2378      	movs	r3, #120	; 0x78
 8005dfc:	4828      	ldr	r0, [pc, #160]	; (8005ea0 <_printf_i+0x248>)
 8005dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e02:	e7e3      	b.n	8005dcc <_printf_i+0x174>
 8005e04:	065e      	lsls	r6, r3, #25
 8005e06:	bf48      	it	mi
 8005e08:	b2ad      	uxthmi	r5, r5
 8005e0a:	e7e6      	b.n	8005dda <_printf_i+0x182>
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	e7bb      	b.n	8005d88 <_printf_i+0x130>
 8005e10:	680b      	ldr	r3, [r1, #0]
 8005e12:	6826      	ldr	r6, [r4, #0]
 8005e14:	6960      	ldr	r0, [r4, #20]
 8005e16:	1d1d      	adds	r5, r3, #4
 8005e18:	600d      	str	r5, [r1, #0]
 8005e1a:	0635      	lsls	r5, r6, #24
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	d501      	bpl.n	8005e24 <_printf_i+0x1cc>
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	e002      	b.n	8005e2a <_printf_i+0x1d2>
 8005e24:	0671      	lsls	r1, r6, #25
 8005e26:	d5fb      	bpl.n	8005e20 <_printf_i+0x1c8>
 8005e28:	8018      	strh	r0, [r3, #0]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	4616      	mov	r6, r2
 8005e30:	e7ba      	b.n	8005da8 <_printf_i+0x150>
 8005e32:	680b      	ldr	r3, [r1, #0]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	600a      	str	r2, [r1, #0]
 8005e38:	681e      	ldr	r6, [r3, #0]
 8005e3a:	6862      	ldr	r2, [r4, #4]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7fa f9ce 	bl	80001e0 <memchr>
 8005e44:	b108      	cbz	r0, 8005e4a <_printf_i+0x1f2>
 8005e46:	1b80      	subs	r0, r0, r6
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	e7a8      	b.n	8005da8 <_printf_i+0x150>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	47d0      	blx	sl
 8005e60:	3001      	adds	r0, #1
 8005e62:	d0ab      	beq.n	8005dbc <_printf_i+0x164>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	079b      	lsls	r3, r3, #30
 8005e68:	d413      	bmi.n	8005e92 <_printf_i+0x23a>
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	bfb8      	it	lt
 8005e72:	4618      	movlt	r0, r3
 8005e74:	e7a4      	b.n	8005dc0 <_printf_i+0x168>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	47d0      	blx	sl
 8005e80:	3001      	adds	r0, #1
 8005e82:	d09b      	beq.n	8005dbc <_printf_i+0x164>
 8005e84:	3501      	adds	r5, #1
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	9903      	ldr	r1, [sp, #12]
 8005e8a:	1a5b      	subs	r3, r3, r1
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dcf2      	bgt.n	8005e76 <_printf_i+0x21e>
 8005e90:	e7eb      	b.n	8005e6a <_printf_i+0x212>
 8005e92:	2500      	movs	r5, #0
 8005e94:	f104 0619 	add.w	r6, r4, #25
 8005e98:	e7f5      	b.n	8005e86 <_printf_i+0x22e>
 8005e9a:	bf00      	nop
 8005e9c:	0800625d 	.word	0x0800625d
 8005ea0:	0800626e 	.word	0x0800626e

08005ea4 <memmove>:
 8005ea4:	4288      	cmp	r0, r1
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	eb01 0402 	add.w	r4, r1, r2
 8005eac:	d902      	bls.n	8005eb4 <memmove+0x10>
 8005eae:	4284      	cmp	r4, r0
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	d807      	bhi.n	8005ec4 <memmove+0x20>
 8005eb4:	1e43      	subs	r3, r0, #1
 8005eb6:	42a1      	cmp	r1, r4
 8005eb8:	d008      	beq.n	8005ecc <memmove+0x28>
 8005eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ec2:	e7f8      	b.n	8005eb6 <memmove+0x12>
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	428a      	cmp	r2, r1
 8005eca:	d100      	bne.n	8005ece <memmove+0x2a>
 8005ecc:	bd10      	pop	{r4, pc}
 8005ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ed6:	e7f7      	b.n	8005ec8 <memmove+0x24>

08005ed8 <_free_r>:
 8005ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d048      	beq.n	8005f70 <_free_r+0x98>
 8005ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee2:	9001      	str	r0, [sp, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eea:	bfb8      	it	lt
 8005eec:	18e4      	addlt	r4, r4, r3
 8005eee:	f000 f8d3 	bl	8006098 <__malloc_lock>
 8005ef2:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <_free_r+0x9c>)
 8005ef4:	9801      	ldr	r0, [sp, #4]
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	4615      	mov	r5, r2
 8005efa:	b933      	cbnz	r3, 8005f0a <_free_r+0x32>
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	6014      	str	r4, [r2, #0]
 8005f00:	b003      	add	sp, #12
 8005f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f06:	f000 b8cd 	b.w	80060a4 <__malloc_unlock>
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	d90b      	bls.n	8005f26 <_free_r+0x4e>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	1862      	adds	r2, r4, r1
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bf04      	itt	eq
 8005f16:	681a      	ldreq	r2, [r3, #0]
 8005f18:	685b      	ldreq	r3, [r3, #4]
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	bf04      	itt	eq
 8005f1e:	1852      	addeq	r2, r2, r1
 8005f20:	6022      	streq	r2, [r4, #0]
 8005f22:	602c      	str	r4, [r5, #0]
 8005f24:	e7ec      	b.n	8005f00 <_free_r+0x28>
 8005f26:	461a      	mov	r2, r3
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b10b      	cbz	r3, 8005f30 <_free_r+0x58>
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	d9fa      	bls.n	8005f26 <_free_r+0x4e>
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	1855      	adds	r5, r2, r1
 8005f34:	42a5      	cmp	r5, r4
 8005f36:	d10b      	bne.n	8005f50 <_free_r+0x78>
 8005f38:	6824      	ldr	r4, [r4, #0]
 8005f3a:	4421      	add	r1, r4
 8005f3c:	1854      	adds	r4, r2, r1
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	d1dd      	bne.n	8005f00 <_free_r+0x28>
 8005f44:	681c      	ldr	r4, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	6053      	str	r3, [r2, #4]
 8005f4a:	4421      	add	r1, r4
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	e7d7      	b.n	8005f00 <_free_r+0x28>
 8005f50:	d902      	bls.n	8005f58 <_free_r+0x80>
 8005f52:	230c      	movs	r3, #12
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	e7d3      	b.n	8005f00 <_free_r+0x28>
 8005f58:	6825      	ldr	r5, [r4, #0]
 8005f5a:	1961      	adds	r1, r4, r5
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf04      	itt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	bf04      	itt	eq
 8005f68:	1949      	addeq	r1, r1, r5
 8005f6a:	6021      	streq	r1, [r4, #0]
 8005f6c:	6054      	str	r4, [r2, #4]
 8005f6e:	e7c7      	b.n	8005f00 <_free_r+0x28>
 8005f70:	b003      	add	sp, #12
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	200017f4 	.word	0x200017f4

08005f78 <_malloc_r>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	1ccd      	adds	r5, r1, #3
 8005f7c:	f025 0503 	bic.w	r5, r5, #3
 8005f80:	3508      	adds	r5, #8
 8005f82:	2d0c      	cmp	r5, #12
 8005f84:	bf38      	it	cc
 8005f86:	250c      	movcc	r5, #12
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	db01      	blt.n	8005f92 <_malloc_r+0x1a>
 8005f8e:	42a9      	cmp	r1, r5
 8005f90:	d903      	bls.n	8005f9a <_malloc_r+0x22>
 8005f92:	230c      	movs	r3, #12
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	2000      	movs	r0, #0
 8005f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f9a:	f000 f87d 	bl	8006098 <__malloc_lock>
 8005f9e:	4921      	ldr	r1, [pc, #132]	; (8006024 <_malloc_r+0xac>)
 8005fa0:	680a      	ldr	r2, [r1, #0]
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	b99c      	cbnz	r4, 8005fce <_malloc_r+0x56>
 8005fa6:	4f20      	ldr	r7, [pc, #128]	; (8006028 <_malloc_r+0xb0>)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	b923      	cbnz	r3, 8005fb6 <_malloc_r+0x3e>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f862 	bl	8006078 <_sbrk_r>
 8005fb4:	6038      	str	r0, [r7, #0]
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f85d 	bl	8006078 <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d123      	bne.n	800600a <_malloc_r+0x92>
 8005fc2:	230c      	movs	r3, #12
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f000 f86c 	bl	80060a4 <__malloc_unlock>
 8005fcc:	e7e3      	b.n	8005f96 <_malloc_r+0x1e>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	1b5b      	subs	r3, r3, r5
 8005fd2:	d417      	bmi.n	8006004 <_malloc_r+0x8c>
 8005fd4:	2b0b      	cmp	r3, #11
 8005fd6:	d903      	bls.n	8005fe0 <_malloc_r+0x68>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	441c      	add	r4, r3
 8005fdc:	6025      	str	r5, [r4, #0]
 8005fde:	e004      	b.n	8005fea <_malloc_r+0x72>
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	42a2      	cmp	r2, r4
 8005fe4:	bf0c      	ite	eq
 8005fe6:	600b      	streq	r3, [r1, #0]
 8005fe8:	6053      	strne	r3, [r2, #4]
 8005fea:	4630      	mov	r0, r6
 8005fec:	f000 f85a 	bl	80060a4 <__malloc_unlock>
 8005ff0:	f104 000b 	add.w	r0, r4, #11
 8005ff4:	1d23      	adds	r3, r4, #4
 8005ff6:	f020 0007 	bic.w	r0, r0, #7
 8005ffa:	1ac2      	subs	r2, r0, r3
 8005ffc:	d0cc      	beq.n	8005f98 <_malloc_r+0x20>
 8005ffe:	1a1b      	subs	r3, r3, r0
 8006000:	50a3      	str	r3, [r4, r2]
 8006002:	e7c9      	b.n	8005f98 <_malloc_r+0x20>
 8006004:	4622      	mov	r2, r4
 8006006:	6864      	ldr	r4, [r4, #4]
 8006008:	e7cc      	b.n	8005fa4 <_malloc_r+0x2c>
 800600a:	1cc4      	adds	r4, r0, #3
 800600c:	f024 0403 	bic.w	r4, r4, #3
 8006010:	42a0      	cmp	r0, r4
 8006012:	d0e3      	beq.n	8005fdc <_malloc_r+0x64>
 8006014:	1a21      	subs	r1, r4, r0
 8006016:	4630      	mov	r0, r6
 8006018:	f000 f82e 	bl	8006078 <_sbrk_r>
 800601c:	3001      	adds	r0, #1
 800601e:	d1dd      	bne.n	8005fdc <_malloc_r+0x64>
 8006020:	e7cf      	b.n	8005fc2 <_malloc_r+0x4a>
 8006022:	bf00      	nop
 8006024:	200017f4 	.word	0x200017f4
 8006028:	200017f8 	.word	0x200017f8

0800602c <_realloc_r>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	4607      	mov	r7, r0
 8006030:	4614      	mov	r4, r2
 8006032:	460e      	mov	r6, r1
 8006034:	b921      	cbnz	r1, 8006040 <_realloc_r+0x14>
 8006036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800603a:	4611      	mov	r1, r2
 800603c:	f7ff bf9c 	b.w	8005f78 <_malloc_r>
 8006040:	b922      	cbnz	r2, 800604c <_realloc_r+0x20>
 8006042:	f7ff ff49 	bl	8005ed8 <_free_r>
 8006046:	4625      	mov	r5, r4
 8006048:	4628      	mov	r0, r5
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604c:	f000 f830 	bl	80060b0 <_malloc_usable_size_r>
 8006050:	42a0      	cmp	r0, r4
 8006052:	d20f      	bcs.n	8006074 <_realloc_r+0x48>
 8006054:	4621      	mov	r1, r4
 8006056:	4638      	mov	r0, r7
 8006058:	f7ff ff8e 	bl	8005f78 <_malloc_r>
 800605c:	4605      	mov	r5, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d0f2      	beq.n	8006048 <_realloc_r+0x1c>
 8006062:	4631      	mov	r1, r6
 8006064:	4622      	mov	r2, r4
 8006066:	f7ff fbf7 	bl	8005858 <memcpy>
 800606a:	4631      	mov	r1, r6
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ff33 	bl	8005ed8 <_free_r>
 8006072:	e7e9      	b.n	8006048 <_realloc_r+0x1c>
 8006074:	4635      	mov	r5, r6
 8006076:	e7e7      	b.n	8006048 <_realloc_r+0x1c>

08006078 <_sbrk_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d06      	ldr	r5, [pc, #24]	; (8006094 <_sbrk_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fa ff1c 	bl	8000ec0 <_sbrk>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_sbrk_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_sbrk_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20002c5c 	.word	0x20002c5c

08006098 <__malloc_lock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_lock+0x8>)
 800609a:	f000 b811 	b.w	80060c0 <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	20002c64 	.word	0x20002c64

080060a4 <__malloc_unlock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__malloc_unlock+0x8>)
 80060a6:	f000 b80c 	b.w	80060c2 <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	20002c64 	.word	0x20002c64

080060b0 <_malloc_usable_size_r>:
 80060b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b4:	1f18      	subs	r0, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfbc      	itt	lt
 80060ba:	580b      	ldrlt	r3, [r1, r0]
 80060bc:	18c0      	addlt	r0, r0, r3
 80060be:	4770      	bx	lr

080060c0 <__retarget_lock_acquire_recursive>:
 80060c0:	4770      	bx	lr

080060c2 <__retarget_lock_release_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <_init>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr

080060d0 <_fini>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr
